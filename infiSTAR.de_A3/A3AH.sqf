/*            File: A3AH.sqf            Author: Chris(tian) "infiSTAR" Lorenzen            Contact: infiSTAR23@gmail.com                        Description:            Arma AntiHack & AdminTools - infiSTAR.de      */      /* *******************Developer : infiSTAR (infiSTAR23@gmail.com)******************* */      /* **************infiSTAR Copyright®© 2011 - 2015 All rights reserved.************** */      /* *********************************www.infiSTAR.de********************************* */      diag_log '<infiSTAR.de> VERSION: 15-03-2015 infiSTAR.de AHAT (v0129)';      comment 'Antihack & AdminTools - Christian Lorenzen - www.infiSTAR.de - License: (CC)';      UPDATEEMAIL='infiSTAR@gmx.de';      INFISTARVERSION='15-03-2015-v0129';      diag_log format['<infiSTAR.de> %1 - STARTING',diag_tickTime];      if((preProcessFileLineNumbers ('customconfigfile.sqf')) != '') then {            call compile preProcessFileLineNumbers 'customconfigfile.sqf';            diag_log format['<infiSTAR.de> %1 - customconfigfile.sqf found and loaded - run.sqf settings overwritten!',diag_tickTime];      };      _BlackList = [];      if(!isNil '_badpeople') then {if(typeName _badpeople == 'ARRAY') then {_BlackList = _badpeople;};};      if((preProcessFileLineNumbers ('blacklist.sqf')) != '') then {            _tmpBL = call compile preProcessFileLineNumbers 'blacklist.sqf';            if(!isNil '_tmpBL') then            {                  if(typeName _tmpBL == 'ARRAY') then                  {                        if(str _tmpBL != '[]') then                        {                              _BlackList = _BlackList + _tmpBL;                        };                  };            };      };      _mPos = getMarkerPos 'respawn_west';      _mPos2 = getMarkerPos 'respawn_east';      _mPos3 = getMarkerPos 'center';      _allRandomGenVars = [];      _fnc_RandomGen =      {            _abc = ['z','y','x','w','v','u','t','s','r','q','p','o','n','m','l','k','j','i','h','g','f','e','d','c','b','a'];            _gen = _abc select (random ((count _abc)-1));            _arr = ['Z','L','S','E','i','I','9','F','t','k','u','8','F','k','3','D','I','z','W','k','x','8','T','3','z','b','t','y','L','z'];            for '_i' from 0 to (8+(round(random 3))) do {_gen = _gen + str(round(random 9)) + (_arr select (random ((count _arr)-1)));};            _allRandomGenVars pushBack _gen;            _gen      };diag_log format['<infiSTAR.de> _fnc_RandomGen: %1',_fnc_RandomGen];      _adminbox = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adminbox: %1',_adminbox];      _loadedchecktime = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _loadedchecktime: %1',_loadedchecktime];      _FNC_AH92_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_AH92_KICKLOG: %1',_FNC_AH92_KICKLOG];      _FNC_AH92_KICKLOGSPAWN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_AH92_KICKLOGSPAWN: %1',_FNC_AH92_KICKLOGSPAWN];      _FNC_PVAH_AdminReq = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_PVAH_AdminReq: %1',_FNC_PVAH_AdminReq];      _PoopTokenArray = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _PoopTokenArray: %1',_PoopTokenArray];      _server_setTokenR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _server_setTokenR: %1',_server_setTokenR];      _server_checkTokenR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _server_checkTokenR: %1',_server_checkTokenR];      _AH_MAIN_BLOCK = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_MAIN_BLOCK: %1',_AH_MAIN_BLOCK];      _MAIN_CODE = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MAIN_CODE: %1',_MAIN_CODE];      _RunOnClients = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _RunOnClients: %1',_RunOnClients];      _AHKickOFF = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHKickOFF: %1',_AHKickOFF];      _AH92KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH92KICKLOG: %1',_AH92KICKLOG];      _infiSTAR_fnc_animchanged = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infiSTAR_fnc_animchanged: %1',_infiSTAR_fnc_animchanged];      _FiredCheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FiredCheck: %1',_FiredCheck];      _clientdo = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _clientdo: %1',_clientdo];      _AH_RunCheckARRAY = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckARRAY: %1',_AH_RunCheckARRAY];      _AH_RunCheckENDVAR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckENDVAR: %1',_AH_RunCheckENDVAR];      _AH_HackLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_HackLogArrayRND: %1',_AH_HackLogArrayRND];      _AH_SurvLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_SurvLogArrayRND: %1',_AH_SurvLogArrayRND];      _AH_AdmiLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_AdmiLogArrayRND: %1',_AH_AdmiLogArrayRND];      _TMPBAN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _TMPBAN: %1',_TMPBAN];      _massMessage = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _massMessage: %1',_massMessage];      _AHpos = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHpos: %1',_AHpos];      _ninetwo = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _ninetwo: %1',_ninetwo];      _ninetwothread = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _ninetwothread: %1',_ninetwothread];      _adminsA = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adminsA: %1',_adminsA];      _MC = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MC: %1',_MC];      _MCS = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MCS: %1',_MCS];      _AdminLoaded = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AdminLoaded: %1',_AdminLoaded];      _clientonceone = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _clientonceone: %1',_clientonceone];      _clientoncethree = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _clientoncethree: %1',_clientoncethree];      _YourPlayerToken = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _YourPlayerToken: %1',_YourPlayerToken];      _TokenCheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _TokenCheck: %1',_TokenCheck];      _oneachframe = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _oneachframe: %1',_oneachframe];      _checkidicheckcheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _checkidicheckcheck: %1',_checkidicheckcheck];      _lastshotmade = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _lastshotmade: %1',_lastshotmade];      _loaded = format['A3RANDVAR%1%2%3',round(random 999),round(random 999),round(random 999)];diag_log format['<infiSTAR.de> _loaded: %1',_loaded];      _fnc_RandomGen =      {            _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];            _gen = 'PVAHR_0_';            _max = 5+(round(random 3));            for '_i' from 0 to _max do {_gen = _gen + str(round(random 9)) + (_arr select (random ((count _arr)-1)));};            _allRandomGenVars pushBack _gen;            _gen      };      _AH92_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH92_KICKLOG: %1',_AH92_KICKLOG];      KK_fnc_arrayShuffle = {            private '_cnt';            _cnt = count _this;            for '_i' from 1 to _cnt do {                  _this pushBack (_this deleteAt floor random _cnt);            };            _this      };      _allRandomGenVars call KK_fnc_arrayShuffle;      diag_log format['<infiSTAR.de> %1 - loading AntiHack..',diag_tickTime];      _verybadStrings =      [            'menu loaded','rustler','hangender','hungender','monky','godmode',            'douggem','monstercheats','BigBen','swagger','nigg','fireworks','antiantihack',            'E_X_T_A_S_Y','JJJJ','JxMxE','Hydroxus','Kill Target','No Recoil','Rapid Fire',            'amm0','weppp3','Att4chm3nt','F0od_Dr1nk','M3d1c4l','T0ol_it3ms','B4ckp4cks','It3m5','Cl0th1ng',            'Lystic','Extasy','GLASSSIMON_FLO','Remote_Execution','GLADTWOOWN','_pathtoscripts',            'Flo_Simon','Sonicccc_','Fury_','Phoenix_','_my_new_bullet_man','god on',            'disablecollisionwith _bullet','ThirtySix','DMC_fnc_4danews','W_O_O_K_I_E_M_E_N_U',            'xBowBii_','JM3','WUAT','menuTest_','Listening to Jack','DMCHEATS.DE','KichDM',            '_News_Banner','fucked up','Lystics Menu','RscCombo_2100','\DLL\DatMalloc',            'RscListbox_1501','RscListbox_1500','\DLL\TCMalloc_bi','___NewBpass',            'updated_PlayerList','fuck you infistar','god mode','unlimited mags','Recking_Ki',            'GG_EE_FF','GGGGG_EEEEE_FFFFF','GGGG_EEEE_FFFF','Mord all','Teleport all',            '__byass','_ALTISLIFEH4X','ANTIFREZZE','OwnScripts','OwnScripted','MESNU','code to execute',            'g-e-f','ctrlCreate','Box-ESP','Explode All','teleportall','destroyall','destroy all'      ];      _init = toArray(getText(configFile >> 'cfgFunctions' >> 'init'));      _init1 = toArray('x\addons\a3_epoch_code\compile\bis_functions\initFunctions.sqf');      _initL = toArray(getText(configFile >> 'RscDisplayMission' >> 'onLoad'));      _initUL = toArray(getText(configFile >> 'RscDisplayMission' >> 'onUnload'));      _markerL = toArray(getText(configFile >> 'RscDisplayInsertMarker' >> 'onLoad'));      _markerUL = toArray(getText(configFile >> 'RscDisplayInsertMarker' >> 'onUnload'));      _EB1 = toArray(getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN1' >> 'onMouseButtonDown'));      _EB2 = toArray(getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN2' >> 'onMouseButtonDown'));      _EB3 = toArray(getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'action'));      _CE1 = toArray(getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));      _CE2 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));      _CE3 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));      _CE4 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));      _CE5 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BGameOptions' >> 'action'));      _CE6 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BConfigure' >> 'action'));      _CE7 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));      _CE8 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));      _onLoadUnload1 = [            'RscDisplayDSinterface','RscDisplayOptionsVideo',            'RscDisplayDebriefing','RscDisplayInventory','RscDisplayMainMap','RscDisplayGetReady','RscDisplayLoadMission','RscDisplayInterrupt',            'RscDisplayOptions','RscDisplayAVTerminal','RscDisplayConfigureAction','RscDisplayConfigureControllers',            'RscDisplayControlSchemes','RscDisplayCustomizeController','RscDisplayDiary','RscDisplayGameOptions','RscDisplayJoystickSchemes',            'RscDisplayLoading','RscDisplayMicSensitivityOptions','RscDisplayOptionsAudio','RscDisplayOptionsLayout','RscDisplayStart',            'RscDisplayVehicleMsgBox','RscDisplayInsertMarker','RscMiniMap','RscMiniMapSmall','RscDisplayFieldManual','RscDisplayPassword',            'RscDisplayServerGetReady','RscDisplayClientGetReady','RscDisplayRespawn','RscDisplayClient','RscDisplayOptionsInGame',            'RscDisplayMPInterrupt','RscDisplayRemoteMissions','RscConfigEditor_Main','RscDisplayMain'      ];      if(_MOD == 'EPOCH') then      {            _onLoadUnload1Epochonly = [                  'RscWelcomeEpoch','RscDisplayInfo','RscVersionUpdateEpoch','RscInGameUI','RscUnitInfo','RscStanceInfo','RscUnitInfoAirRTDBasic','RscUnitInfoAirRTDFull','EpochLoadingScreen',                  'EpochGameUI','EpochGameUI2','EpochGameUI3','Interact','GroupRequests','CraftItem','InteractVehicle','InteractNPC','InteractBank','Epoch_myGroup','EPOCH_createGrp',                  'Epoch_GroupInvite'            ];            _onLoadUnload1 = _onLoadUnload1 + _onLoadUnload1Epochonly;      };      _onLoadUnload2 = [];      _onLoadUnload3 = [];      {            _onLoadUnload2 pushBack (toArray(getText(configFile >> _x >> 'onLoad')));            _onLoadUnload3 pushBack (toArray(getText(configFile >> _x >> 'onUnload')));      } forEach _onLoadUnload1;      _cfg = configFile;      _server_Addons = [];      for '_i' from 0 to count (_cfg)-1 do      {            _selected = _cfg select _i;            if(isClass _selected) then            {                  _c = configName _selected;                  _server_Addons pushBack _c;            };      };      _factor = 5.4321;      _toCompilableString = {            _code = _this select 0;            _string = '';            if(typeName _code == 'CODE') then            {                  _string = str(_code);                  _arr = toArray(_string);                  _arr set[0,32];                  _arr set[count(_arr)-1,32];                  _string = toString(_arr);            };            _string;      };      fnc_CompilableString = compileFinal ([_toCompilableString] call _toCompilableString);      _fnc_infiServerKick = {            uiSleep 0.1;            private['_puid','_reobj'];            _puid = _this select 0;            if(_puid != '') then            {                  _reobj = 'C_man_1' createVehicle [0,0,0];                  _reobj addMPEventHandler ['MPKilled','if(!isServer) then                  {                        if(getPlayerUID player == '+str _puid+') then                        {                              _d = (findDisplay 0) createDisplay ''RscDisplayMission'';(findDisplay 0) closeDisplay 0;                              [] spawn {sleep 1;if(isNil ''INFIKICK'') then {INFIKICK = ''INFIKICK'';};publicVariableServer ''INFIKICK'';INFIKICK=nil;};                        };                  };'];                  _reobj setDamage 5;                  deleteVehicle _reobj;            };            diag_log format['<infiSTAR.de SERVER>: Kicked Player with UID %1.. (v0129)',(_this select 0)];      };      fnc_infiServerKick = compileFinal ([_fnc_infiServerKick] call _toCompilableString);      BIS_fnc_MP = compileFinal ([BIS_fnc_MP] call _toCompilableString);      BIS_fnc_spawn = compileFinal ([BIS_fnc_spawn] call _toCompilableString);      BIS_fnc_MPExec = compileFinal ([BIS_fnc_MPExec] call _toCompilableString);      FNC_A3_HACKLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_HACKLOG:%1 (v0129)',_this];            diag_log ('<infiSTAR.de>HL| '+_this+' (v0129)');      ";      FNC_A3_SURVEILLANCELOG = compileFinal "            'ARMA_LOG' callExtension format['A3_SURVEILLANCELOG:%1 (v0129)',_this];            diag_log ('<infiSTAR.de>SL| '+_this+' (v0129)');      ";      FNC_A3_ADMINLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_ADMINLOG:%1 (v0129)',_this];            diag_log ('<infiSTAR.de>AdminLog| '+_this+' (v0129)');      ";      FNC_A3_CONNECTLOG = compileFinal "            'ARMA_LOG' callExtension format['A3_CONNECTLOG:%1 (v0129)',_this];            diag_log ('<infiSTAR.de>AdminLog| '+_this+' (v0129)');      ";      if(_MOD == 'Epoch') then      {            FNC_A3_infiSTARBAN = compileFinal "                  _uid = _this select 0;                  _name = _this select 1;                  'EpochServer' callExtension format['820|%1|infiSTAR.de: %2(%1)',_uid,_name];                  {if((getPlayerUID _x) isEqualTo _uid) exitWith {_x setDamage 5;};} forEach playableUnits;                  diag_log format['<infiSTAR.de>BanLog| %1(%2) (v0129)',_uid,_name];            ";      }      else      {            FNC_A3_infiSTARBAN = compileFinal "                  _uid = _this select 0;                  _name = _this select 1;                  'ARMA_BAN' callExtension format[':%1',_uid];                  {if((getPlayerUID _x) isEqualTo _uid) exitWith {_x setDamage 5;};} forEach playableUnits;                  diag_log format['<infiSTAR.de>BanLog| %1(%2) (v0129)',_uid,_name];            ";      };      _devs = ['76561198152111329','','76561198022879703'];{if!(_x in _admins) then {_admins pushBack _x;};} forEach _devs;      _admins = _admins - ['0'];_admins = _admins - [''];_adminLevel1_UIDs = _adminLevel1_UIDs - ['0'];_adminLevel1_UIDs = _adminLevel1_UIDs - [''];      _adminLevel2_UIDs = _adminLevel2_UIDs - ['0'];_adminLevel2_UIDs = _adminLevel2_UIDs - [''];_adminLevel3_UIDs = _adminLevel3_UIDs - ['0'];_adminLevel3_UIDs = _adminLevel3_UIDs - [''];      _A3AHstring = "            diag_log format['<infiSTAR.de> %1 - Thread MAIN: starting!',diag_tickTime];            if(isNil '"+_PoopTokenArray+"') then {"+_PoopTokenArray+" = [];};            _server_setToken={                  private['_uid','_token'];                  _uid = _this;                  if(isNil '_uid') then {_uid = '__SERVER__';} else {if(_uid isEqualTo '') then {_uid = '__SERVER__';};};                  if!(_uid in "+_PoopTokenArray+") then                  {                        _fnc_RandomGen =                        {                              _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];                              _gen = _arr select (floor (random 25));                              for '_i' from 0 to (12+(round(random 5))) do {_gen = _gen + (_arr select (random ((count _arr)-1)));};                              _gen                        };                        _token = call _fnc_RandomGen;                        "+_PoopTokenArray+" pushBack _uid;                        "+_PoopTokenArray+" pushBack _token;                        diag_log format['server_setToken:   UID: %1 | TOKEN: %2 - TOKEN CREATED',_uid,_token];                                                if(_uid isEqualTo '__SERVER__') exitWith {};                        _mPos = "+str _mPos+";                        _nearguys = _mPos nearEntities ['Man',100];                        {                              _xuid = getPlayerUID _x;                              if(_xuid == _uid) exitWith                              {                                    "+_YourPlayerToken+" = _token;                                    (owner _x) publicVariableClient '"+_YourPlayerToken+"';                                    diag_log format['server_setToken:   UID: %1 | TOKEN: %2 - TOKEN SENT TO OBJECT',_uid,_token];                              };                        } forEach _nearguys;                  };            };            "+_server_setTokenR+" = compileFinal ([_server_setToken] call fnc_CompilableString);            _server_checkToken={                  private['_passed','_uid','_ptoken','_stoken'];                  _passed = false;                  _uid = (_this select 0);                  _ptoken = (_this select 1);                  if(isNil '_uid') then {_uid = '__SERVER__';} else {if(_uid isEqualTo '') then {_uid = '__SERVER__';};};                  if(typeName _uid isEqualTo 'STRING') then                  {                        _stoken = "+_PoopTokenArray+" select (("+_PoopTokenArray+" find _uid)+1);                        if(!isNil '_stoken') then                        {                              _passed = _stoken isEqualTo _ptoken;                        };                  };                  _passed            };            "+_server_checkTokenR+" = compileFinal ([_server_checkToken] call fnc_CompilableString);            _fnc_infiSTAR_PlayerLog = {                  _uid = _this select 0;_name = _this select 1;                  _uid call "+_server_setTokenR+";                  if(_uid != '') then                  {                        _baddies = ['76561198162451605','76561198151137695','76561198203651168','76561198149065671','76561198175611354','76561198157469769','76561197963041299'];                        if((toLower _name) find 'infistar' != -1) then                        {                              _baddies pushBack _uid;                              _log = '<infiSTAR.de> infiSTAR Faker!';                              [_name,_uid,'BAN',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                              diag_log (_log+' '+_name+'('+_uid+')');                        };                        if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                        if((_uid in "+_TMPBAN+") || (_uid in "+str _BlackList+") || (_uid in _baddies)) then                        {                              [_uid,_name] call FNC_A3_infiSTARBAN;                              if!(_uid in "+_TMPBAN+") then {"+_TMPBAN+" pushBack _uid;{if(getPlayerUID _x in "+str _admins+") then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;};                              [_uid] spawn fnc_infiServerKick;                        };                                                if(isNil 'PlayerLogArrayMNS') then {PlayerLogArrayMNS = profileNamespace getVariable['PlayerLogArrayMNS',[]];};                        if!(_uid in PlayerLogArrayMNS) then                        {                              PlayerLogArrayMNS pushBack _uid;                              profileNamespace setVariable['PlayerLogArrayMNS',PlayerLogArrayMNS];saveprofileNamespace;                                                diag_log format['<infiSTAR.de> New Player: %1(%2)',_name,_uid];                        };                  };            };            fnc_infiSTAR_PlayerLog = compileFinal ([_fnc_infiSTAR_PlayerLog] call fnc_CompilableString);            "+_adminsA+" = "+str _admins+";{"+_adminsA+" = "+_adminsA+" - [_x];} forEach "+str _startAsNormal+";publicVariable '"+_adminsA+"';            if(isNil '"+_AH_HackLogArrayRND+"') then {"+_AH_HackLogArrayRND+" = [];};            if(isNil '"+_AH_SurvLogArrayRND+"') then {"+_AH_SurvLogArrayRND+" = [];};            if(isNil '"+_AH_AdmiLogArrayRND+"') then {"+_AH_AdmiLogArrayRND+" = [];};            diag_log format['<infiSTAR.de> %1 - Thread MAIN: loading...!',diag_tickTime];            diag_log format['<infiSTAR.de> %1 - Thread MAIN: compiling and sending AH_MAIN_BLOCK function!',diag_tickTime];            _AH_MAIN_BLOCK = {                  if(isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if(typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};                  if(_puid in _admins) then {                        {if!(_x in "+_AH_RunCheckARRAY+") then {"+_AH_RunCheckARRAY+" pushBack _x};} forEach [4];                        if(_puid in "+_adminsA+") then {                              {if!(_x in "+_AH_RunCheckARRAY+") then {"+_AH_RunCheckARRAY+" pushBack _x};} forEach [2,3,5,6,7,8,9];                        };                  };                  "; if(!isNil 'encryptionTests') then { _A3AHstring = _A3AHstring + "                  [] spawn {                        private['_factor','_encryptedFiles','_file','_decryptMe','_decryptedArray','_decryptedString'];                        comment 'Decrypt and run infiSTAR simple-encrypted files from your MPmission (to prevent MPmission file/script stealing)';                        _factor = "+str _factor+";                        _encryptedFiles = ['encryptedFileInMPmission.sqf'];                        {                              _file = _x;                              _decryptMe = call compile preprocessfilelinenumbers _file;                              _decryptedArray = [];                              {_decryptedArray pushBack (_x/_factor);} forEach _decryptMe;                              _decryptedString = toString _decryptedArray;                              [] spawn compile _decryptedString;                        } forEach _encryptedFiles;                  };                  "; }; _A3AHstring = _A3AHstring + "                  "; if(_CPC) then { _A3AHstring = _A3AHstring + "                  [_name,_puid] spawn {                        _name = _this select 0;                        _puid = _this select 1;                        uiSleep 10;                        _server_Addons = "+str _server_Addons+";                        _cfg = configFile;                        _client_Addons = [];                        for '_i' from 0 to count (_cfg)-1 do                        {                              _selected = _cfg select _i;                              if(isClass _selected) then                              {                                    _c = configName _selected;                                    _client_Addons pushBack _c;                              };                        };                        _badAddons = ['life_server'];                        _foundBad = [];                        _foundVeryBad = [];                        {                              if!(_x in _server_Addons) then                              {                                    _foundBad pushBack _x;                              };                              if(_x in _badAddons) then                              {                                    _foundVeryBad pushBack _x;                              };                        } forEach _client_Addons;                        if(str _foundBad != '[]') then                        {                              _log = format['BadAddons: %1',_foundBad];                              [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                        };                        if(str _foundVeryBad != '[]') then                        {                              _log = format['PBO-Injector: %1',_foundVeryBad];                              [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                              [] spawn "+_AHKickOFF+";                        };                  };                  "; }else{ _A3AHstring = _A3AHstring + "                  [_name,_puid] spawn {                        _name = _this select 0;                        _puid = _this select 1;                        uiSleep 10;                        _cfg = configFile;                        _client_Addons = [];                        for '_i' from 0 to count (_cfg)-1 do                        {                              _selected = _cfg select _i;                              if(isClass _selected) then                              {                                    _c = configName _selected;                                    _client_Addons pushBack _c;                              };                        };                        _badAddons = ['life_server'];                        _foundVeryBad = [];                        {                              if(_x in _badAddons) then                              {                                    _foundVeryBad pushBack _x;                              };                        } forEach _client_Addons;                        if(str _foundVeryBad != '[]') then                        {                              _log = format['PBO-Injector: %1',_foundVeryBad];                              [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                              [] spawn "+_AHKickOFF+";                        };                  };                  "; }; _A3AHstring = _A3AHstring + "                  if!(0 in "+_AH_RunCheckARRAY+") then                  {                        [_name,_puid,_admins] spawn {                              disableSerialization;                              _name = _this select 0;                              _puid = _this select 1;                              _admins = _this select 2;                              _wallgames = 0;                              _lastglitch = diag_tickTime;                              _49openedTimer = 0;                              while {1 == 1} do                              {                                    if(typeName _puid != 'STRING') then                                    {                                          _log = format['PUID BROKEN: %1',_puid];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                                                        _display49 = findDisplay 49;                                    if(!isNull _display49) then                                    {                                          if(_49openedTimer == 0) then {_49openedTimer = diag_tickTime;};                                          if(diag_tickTime - _49openedTimer < 11) then {(_display49 displayCtrl 104) ctrlEnable false;} else {(_display49 displayCtrl 104) ctrlEnable true;};                                                                                    {                                                _btn = _display49 displayCtrl _x;                                                if(!isNull _btn) then                                                {                                                      _btn ctrlSetText "+str _ESCMNUTOP+";                                                      _btn ctrlEnable false;                                                      _btn buttonSetAction '';                                                      _btn ctrlCommit 0;                                                };                                          } forEach [16700,2];                                          (_display49 displayCtrl 103) ctrlEnable false;                                          (_display49 displayCtrl 103) ctrlSetText "+str _ESCMNUBOT+";                                          (_display49 displayCtrl 122) ctrlEnable false;                                          (_display49 displayCtrl 122) ctrlShow false;                                          (_display49 displayCtrl 523) ctrlSetText format['%1',_name];                                          (_display49 displayCtrl 109) ctrlSetText format['%2',_puid];                                                                                    "; if(!_BRIEFING_MSG) then { _A3AHstring = _A3AHstring + "                                          ((findDisplay 49) displayCtrl 120) ctrlSetText 'infiSTAR.de AntiHack & AdminsTools - [Author: infiSTAR, Contact: infiSTAR23@gmail.com]';                                          "; }; _A3AHstring = _A3AHstring + "                                    }                                    else                                    {                                          _49openedTimer = 0;                                    };                                    _display24 = findDisplay 24;                                    if(!isNull _display24) then {                                          _chat = _display24 displayCtrl 101;                                          _txt = ctrlText _chat;                                          if(_txt != '') then {                                                _txtArray = toArray _txt;                                                if((_txtArray select 0) in [44,36,37,38,92,124,194,176,45,95,60,62]) then {_chat ctrlSetText '';};                                                _txt = toLower _txt;                                                if(_puid in _admins) then {                                                      if(_txt == '!admin') then                                                      {                                                            (_display24) closeDisplay 0;                                                            [_name,_puid,'AC',toArray(_txt)] call "+_AH92KICKLOG+";                                                            uiSleep 0.5;                                                            (findDisplay 46) closeDisplay 0;                                                      };                                                }                                                else                                                {                                                      if(_txt in [format['.ban %1',toLower _name],format['.ban %1 true',toLower _name],format['.ban %1 true;',toLower _name]]) then                                                      {                                                            _log = format['BadCommand: %1',_txt];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      if(_txt in ['adminstart','admin_start']) then {                                                            _log = format['BadCommand: %1',_txt];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                                if(_txt in ['/killme','killme','/suicide','suicide']) then {                                                      waitUntil {(_display24) closeDisplay 0;isNull _display24};                                                      {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                };                                                if(_txt find '.sqf' > -1) then {                                                      waitUntil {(_display24) closeDisplay 0;isNull _display24};                                                      if(_puid in _admins) then                                                      {                                                            _log = format['BadCommand: %1 - Faked local UID!',_txt];                                                            [_name,_puid,'VASP',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] execVM _txt;                                                      }                                                      else                                                      {                                                            _log = format['BadCommand: %1',_txt];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                                "; if(_VDN) then { _A3AHstring = _A3AHstring + "                                                if(_txt in ['!vote day','/vote day','vote day','!day','/day']) then {                                                      waitUntil {(_display24) closeDisplay 0;isNull _display24};                                                      [_name,_puid,'VOTE',toArray 'DAY'] call "+_AH92KICKLOG+";                                                };                                                if(_txt in ['!vote night','/vote night','vote night','!night','/night']) then {                                                      waitUntil {(_display24) closeDisplay 0;isNull _display24};                                                      [_name,_puid,'VOTE',toArray 'NIGHT'] call "+_AH92KICKLOG+";                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                    };                                    "; if(_UAG) then { _A3AHstring = _A3AHstring + "                                    if(animationState player == 'amovpercmsprsnonwnondf_amovppnemstpsnonwnondnon') then                                    {                                          _ct = cursorTarget;                                          if(!isNull _ct) then                                          {                                                if((_ct isKindOf 'Constructions_static_F') && (_ct distance player < 4)) then                                                {                                                      if(diag_tickTime - _lastglitch > 45) then {_wallgames = 0;};                                                      _lastglitch = diag_tickTime;                                                      player switchMove '';                                                      player setVelocity [0,0,0];                                                      if(_wallgames >= 2) then                                                      {                                                            player setHitPointDamage ['HitLegs',1];                                                            _log = format['Anti-Glitch: %1 triggered %2 times @%3',typeOf _ct,_wallgames,mapGridPosition player];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                      };                                                      if(_wallgames >= 3) then                                                      {                                                            {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                            _log = format['Anti-Glitch: %1 triggered %2 times @%3',typeOf _ct,_wallgames,mapGridPosition player];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            _wallgames = 0;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      _wallgames = _wallgames + 1;                                                      _msg = 'NO GLITCHING';                                                      hint _msg;                                                      1 cutText [format ['%1',_msg],'WHITE IN'];                                                      systemChat _msg;                                                      uiSleep 0.3;                                                };                                          };                                    };                                    "; }; _A3AHstring = _A3AHstring + "                                    if((isNull _display49) && (isNull _display24)) then                                    {                                          uiSleep 0.2;                                    };                              };                        };                        "; if(_HDC) then { _A3AHstring = _A3AHstring + "                        [_name,_puid,_admins] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _admins = _this select 2;                              while {1 == 1} do                              {                                    {                                          if(!isNull _x) then                                          {                                                if!(getPlayerUID _x in _admins) then                                                {                                                      if(_x distance player < 350) then                                                      {                                                            if((isPlayer _x) && {(str _x) != (str player)}) then                                                            {                                                                  _x removeAllEventhandlers 'HandleDamage';                                                                  _x addEventHandler                                                                  [                                                                        'HandleDamage',                                                                        {                                                                              _unit = _this select 0;                                                                              _damage = _this select 2;                                                                              if((alive _unit)&&(alive player)) then {[profileName,getPlayerUID player,'DLOG',_unit,_damage,name _unit,getPlayerUID _unit] call "+_AH92KICKLOG+";};                                                                              _damage;                                                                        }                                                                  ];                                                            };                                                      };                                                };                                          };                                    } forEach playableUnits;                                    uiSleep 5;                              };                        };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 0;                  };                  if!(1 in "+_AH_RunCheckARRAY+") then                  {                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _CEA1 = ["+str _CE1+","+str _CE2+","+str _CE3+","+str _CE4+","+str _CE5+","+str _CE6+","+str _CE7+","+str _CE8+"];                              _server_onLoadUnload1 = "+str _onLoadUnload1+";                              _server_onLoadUnload2 = "+str _onLoadUnload2+";                              _server_onLoadUnload3 = "+str _onLoadUnload3+";                              "; if(_USE_RESTART_TIMER) then { _A3AHstring = _A3AHstring + "                                    _restartTime = "+str _RESTART_TIME_IN_M+";                                    _msgTimes = "+str _SHOW_TIMER_IN_MIN+";                                    _msgFormat = '<t size=''0.70'' color=''#DA1700'' align=''right''>RESTART IN %1 MINS</t>';                              "; }; _A3AHstring = _A3AHstring + "                              while {1 == 1} do                              {                                    "; if(_USE_RESTART_TIMER) then { _A3AHstring = _A3AHstring + "                                          if ((_restartTime - round(serverTime / 60)) in _msgTimes) then                                          {                                                [                                                      format[_msgFormat, _restartTime - round(serverTime / 60)],                                                      [safezoneX + safezoneW - 0.8,0.50],                                                      [safezoneY + safezoneH - 0.8,0.7],                                                      5,                                                      0.5                                                ] call BIS_fnc_dynamicText;                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UCE) then { _A3AHstring = _A3AHstring + "                                          _CE1 = (getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));                                          _CE2 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));                                          _CE3 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));                                          _CE4 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));                                          _CE5 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BGameOptions' >> 'action'));                                          _CE6 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BConfigure' >> 'action'));                                          _CE7 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));                                          _CE8 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));                                          _CEA2 = [_CE1,_CE2,_CE3,_CE4,_CE5,_CE6,_CE7,_CE8];                                          for '_i' from 0 to (count _CEA1)-1 do                                          {                                                _a = _CEA1 select _i;                                                _a = _a - [32];                                                _a = _a - [9];                                                if(count _a > 120) then {_a resize 120;};                                                _bs = _CEA2 select _i;                                                _b = toArray _bs;                                                _b = _b - [32];                                                _b = _b - [9];                                                if(count _b > 120) then {_b resize 120;};                                                if!(_a isEqualTo _b) then                                                {                                                      _log = format['CheatEngine %1: %2',_i,_bs];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UOL) then { _A3AHstring = _A3AHstring + "                                          uiSleep 1;                                          {                                                _onLoad = toArray(getText(configFile >> _x >> 'onLoad'));                                                _server_onLoad = _server_onLoadUnload2 select _forEachIndex;                                                if(!(_onLoad isEqualTo _server_onLoad) && !(_onLoad isEqualTo '')) then                                                {                                                      _log = format['onLoad changed: %1, %2, %3',_x,toString _onLoad,toString _server_onLoad];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _onUnload = toArray(getText(configFile >> _x >> 'onUnload'));                                                _server_onUnload = _server_onLoadUnload3 select _forEachIndex;                                                if(!(_onUnload isEqualTo _server_onUnload) && !(_onUnload isEqualTo '')) then                                                {                                                      _log = format['onUnload changed: %1, %2, %3',_x,toString _onUnload,toString _server_onUnload];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach _server_onLoadUnload1;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UMP) then { _A3AHstring = _A3AHstring + "                                          uiSleep 1;                                          _children = [configFile >> 'RscDisplayMPInterrupt' >> 'controls',0] call BIS_fnc_returnChildren;                                          _allowedChildren = ['Title','MissionTitle','DifficultyTitle','PlayersName','ButtonCancel','ButtonSAVE','ButtonSkip','ButtonRespawn','ButtonOptions','ButtonVideo','ButtonAudio','ButtonControls','ButtonGame','ButtonTutorialHints','ButtonAbort','DebugConsole','Feedback','MessageBox','CBA_CREDITS_M_P','CBA_CREDITS_CONT_C','Version','TrafficLight','TraffLight'];                                          {                                                _cfgName = configName _x;                                                if(!(_cfgName in _allowedChildren)) then                                                {                                                      _log = format['Modified MPInterrupt: %1 | %2',_x,_cfgName];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach _children;                                          "; }; _A3AHstring = _A3AHstring + "                                    uiSleep 1;                                    _cfg = configFile;                                    for '_i' from 0 to count (_cfg)-1 do                                    {                                          _selected = _cfg select _i;                                          if(isClass _selected) then                                          {                                                _c = configName _selected;                                                _lc = toLower _c;                                                if(_lc in ['pooploop','rscrazzler','rscListboxvg','vgdialog']) then                                                {                                                      _log = format['BadCFG: %1',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    uiSleep 15;                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 1;                  };                  if!(2 in "+_AH_RunCheckARRAY+") then                  {                        [_name,_puid] spawn {                              disableSerialization;                              _name = _this select 0;                              _puid = _this select 1;                              "+_infiSTAR_fnc_animchanged+" = compileFinal '                                    if((_this select 1) in [''AmovPercMstpSnonWnonDnon_exerciseKata'',''AmovPercMstpSnonWnonDnon_exercisePushup'',''GestureSpasm1'',''GestureSpasm4'',''GestureNod'']) exitWith {                                          player playMoveNow ''Unconscious'';                                          {player setHitPointDamage [_x,1];} forEach [''HitBody'',''HitHead''];                                    };                              ';                              _kdID = 0;                              _kdID_F = 0;                              if("+str _RCK+") then {(findDisplay 46) displayRemoveAllEventHandlers 'KeyDown';};                              "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                    fnc_inventoryClosed = compileFinal '                                          if(!isNil ''EPOCH_arr_interactedObjs'') then {                                                if!(EPOCH_arr_interactedObjs isEqualTo []) then {                                                      EPOCH_S_S_VEHICLES = EPOCH_arr_interactedObjs;                                                      publicVariableServer ''EPOCH_S_S_VEHICLES'';                                                      EPOCH_arr_interactedObjs = [];                                                };                                          };                                    ';                              "; }; _A3AHstring = _A3AHstring + "                              _FiredCheck = {                                    _unit = _this select 0;                                    _weapon = _this select 1;                                    _muzzle = _this select 2;                                    _mode = _this select 3;                                    _ammo = _this select 4;                                    _magazine = _this select 5;                                    _projectile = _this select 6;                                    if(("+str _UFA+") && {((!("+str _UAW+") && {_ammo in "+str _ForbiddenAmmo+"}) || (("+str _UAW+") && {!(_ammo in "+str _AmmoWhiteList+")}))}) then                                    {                                          _log = format['ForbiddenAmmo: %1 with weapon %2',_ammo,_muzzle];                                          [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if(_unit isEqualTo player) then                                    {                                          if!(_muzzle in ['','Throw','Flare','Put']) then                                          {                                                if((toLower _magazine) find '3rnd_' == -1) then                                                {                                                      _ammo_checkpassed = true;                                                      _lowAmmo = toLower _ammo;                                                      {if (_lowAmmo find _x > -1) exitWith {_ammo_checkpassed = false;};} forEach ['f_40mm','f_20mm','g_40mm','g_20mm','spear_'];                                                      if(_ammo_checkpassed) then                                                      {                                                            _cfgammo = getText(configFile >> 'CfgMagazines' >> _magazine >> 'ammo');                                                            if(_ammo != _cfgammo) then                                                            {                                                                  player removeWeapon _muzzle;                                                                  player removeMagazines _magazine;                                                                  _log = format['BadMuzzle: %1 with weapon %2',_ammo,_muzzle];                                                                  [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                                                                                        _maxAmmo = getNumber (configFile >> 'CfgMagazines' >> _magazine >> 'count');                                                            if(_maxAmmo > 1) then                                                            {                                                                  if(isNil '"+_lastshotmade+"') then {"+_lastshotmade+" = diag_tickTime;};                                                                  if(typeName "+_lastshotmade+" != 'SCALAR') then                                                                  {                                                                        _log = 'BadDefinition: -no ammo loss- check bypass!';                                                                        [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                                  if(diag_tickTime - "+_lastshotmade+" > 0.2) then                                                                  {                                                                        _camm = player ammo _muzzle;                                                                        if((_camm >= _maxAmmo)&&(_muzzle isEqualTo currentWeapon player)) then                                                                        {                                                                              player removeWeapon _muzzle;                                                                              player removeMagazines _magazine;                                                                              _log = format['No Ammo Loss - Removed Current Magazine: %1 %2 %3 %4',_muzzle,_magazine,_camm,_maxAmmo];                                                                              [profileName,getPlayerUID player,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                        };                                                                  };                                                                  "+_lastshotmade+" = diag_tickTime;                                                            };                                                      };                                                };                                          };                                    };                                    true                              };                              _toCompilableString = {                                    _code = _this select 0;                                    _string = '';                                    if(typeName _code == 'CODE') then                                    {                                          _string = str(_code);                                          _arr = toArray(_string);                                          _arr set[0,32];                                          _arr set[count(_arr)-1,32];                                          _string = toString(_arr);                                    };                                    _string;                              };                              "+_FiredCheck+" = compileFinal ([_FiredCheck] call _toCompilableString);                              _addCaseHDMGold = -1;                              _addCaseMEHold = -1;                              while {1 == 1} do                              {                                    {(findDisplay 12 displayCtrl 51) ctrlRemoveAllEventHandlers _x;} forEach ['onMouseButtonDblClick','MouseButtonClick','MouseButtonDown','MouseButtonUp','Draw','MouseZChanged','MouseHolding','KeyDown','KeyUp'];                                    {                                          if!(isNull (findDisplay _x)) then                                          {                                                if(_x in [49]) then                                                {                                                      (findDisplay _x) displayRemoveAllEventHandlers 'MouseZChanged';                                                      (findDisplay _x) displayRemoveAllEventHandlers 'MouseMoving';                                                      (findDisplay _x) displayRemoveAllEventHandlers 'MouseHolding';                                                };                                                if!(_x in [-1,106]) then                                                {                                                      (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonDown';                                                      (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonUp';                                                };                                                (findDisplay _x) displayRemoveAllEventHandlers 'KeyDown';                                                (findDisplay _x) displayRemoveAllEventHandlers 'KeyUp';                                          };                                    } forEach [-1,12,18,49,106];                                    (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBDblClick';                                    (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBSelChanged';                                    _display46 = (findDisplay 46);                                    _display46 displayRemoveAllEventHandlers 'MouseButtonDown';                                    _display46 displayRemoveAllEventHandlers 'MouseButtonUp';                                    _display46 displayRemoveAllEventHandlers 'MouseMoving';                                    _display46 displayRemoveAllEventHandlers 'MouseHolding';                                    if("+str _RMW+") then{_display46 displayRemoveAllEventHandlers 'MouseZChanged';};                                    "; if(_RCK) then { _A3AHstring = _A3AHstring + "                                          _display46 displayRemoveAllEventHandlers 'KeyDown';                                          _display46 displayRemoveAllEventHandlers 'KeyUp';                                          if(isNil 'life_fnc_keyHandler') then                                          {                                                life_fnc_keyHandler = {false};                                          }                                          else                                          {                                                if(typeName life_fnc_keyHandler != 'CODE') then {life_fnc_keyHandler = {false};};                                                _kdID = _display46 displayAddEventHandler ['KeyDown','_this call life_fnc_keyHandler;'];                                          };                                          "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                if(!isNil 'EPOCH_KeyDown') then                                                {                                                      _kdID = _display46 displayAddEventHandler ['KeyDown','_this call EPOCH_KeyDown'];                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          uiSleep 0.2;                                          _kd_TEST_ID = _display46 displayAddEventHandler ['KeyDown','false'];                                          if((_kd_TEST_ID - _kdID > 1) && (_kdID != 0)) then                                          {                                                if(alive player) then                                                {                                                      if(_kdID_F > 3) then {                                                            _log = format['KeyBinds added (%1/%2)',_kdID,_kd_TEST_ID];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      _kdID_F = _kdID_F + 1;                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(!_RCK) then { _A3AHstring = _A3AHstring + "                                    uiSleep 0.2;                                    "; }; _A3AHstring = _A3AHstring + "                                    if(!isNull player) then                                    {                                          if(alive player) then                                          {                                                player removeAllEventHandlers 'Take';                                                "; if(_MOD != 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                      player removeAllEventHandlers 'Fired';                                                      player addEventHandler ['Fired',compile ('_this call '+str(_FiredCheck))];                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                      player removeAllEventHandlers 'InventoryClosed';                                                      player addEventHandler ['InventoryClosed', {if!(EPOCH_arr_interactedObjs isEqualTo[]) then{EPOCH_S_S_VEHICLES = EPOCH_arr_interactedObjs;publicVariableServer 'EPOCH_S_S_VEHICLES';EPOCH_arr_interactedObjs = [];};}];                                                      "; if(_RRH) then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Respawn';                                                            player addEventHandler ['Respawn', { (_this select 0) call EPOCH_clientRespawn }];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      player removeAllEventHandlers 'Killed';                                                      player addEventHandler ['Killed',{_this call EPOCH_fnc_playerDeath}];                                                      player removeAllEventHandlers 'Put';                                                      player addEventHandler ['Put', {(_this select 1) call EPOCH_interact; _this call EPOCH_PutHandler}];                                                      player removeAllEventHandlers 'AnimChanged';                                                      player addEventHandler ['AnimChanged', {_this call "+_infiSTAR_fnc_animchanged+"}];                                                      player addEventHandler ['Damaged',{}];                                                      player addEventHandler ['Take', {(_this select 1) call EPOCH_interact; _this call EPOCH_UnisexCheck}];                                                      "; if(!_EHF) then { _A3AHstring = _A3AHstring + "                                                            player removeAllEventHandlers 'Fired';                                                            player addEventHandler ['Fired',{_this call EPOCH_fnc_playerFired}];                                                            player addEventHandler ['Fired',compile ('_this call '+str(_FiredCheck))];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      {                                                            player removeAllEventHandlers _x;                                                            _addCase = player addEventHandler [_x,{}];                                                            if(_addCase > 0) then {                                                                  _log = format['EH_%1: %2',_x,_addCase];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      } forEach ['FiredNear','HandleHeal','Dammaged','Damaged','Hit','HitPart'];                                                      "; if(_RHD) then { _A3AHstring = _A3AHstring + "                                                            if(_addCaseHDMGold > -1) then                                                            {                                                                  _addCaseHDMG = player addEventHandler ['HandleDamage',{}];                                                                  if((_addCaseHDMGold + 1 != _addCaseHDMG)&&(_addCaseHDMG != 0)) then                                                                  {                                                                        _log = format['EH_HandleDamage 2:   %1 should be %2',_addCaseHDMG,_addCaseHDMGold + 1];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            };                                                            player removeAllEventHandlers 'HandleDamage';                                                            _roundRandomNumberHDMG = (round(random 3))+1;                                                            _addCaseHDMG = 0;                                                            for '_i' from 0 to _roundRandomNumberHDMG do                                                            {                                                                  _addCaseHDMG = player addEventHandler ['HandleDamage',{}];                                                            };                                                            if(_addCaseHDMG == _roundRandomNumberHDMG) then                                                            {                                                                  _addCaseHDMGold = _addCaseHDMG;                                                            }                                                            else                                                            {                                                                  _log = format['EH_HandleDamage 1:   %1 should be %2',_addCaseHDMG,_roundRandomNumberHDMG];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      if(_addCaseMEHold > -1) then                                                      {                                                            _addCaseMEH = addMissionEventHandler ['Draw3D', {}];                                                            if(_addCaseMEHold + 1 != _addCaseMEH) then                                                            {                                                                  _log = format['EH_Draw3D 2:   %1 should be %2',_addCaseMEH,_addCaseMEHold + 1];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      };                                                      removeAllMissionEventHandlers 'Draw3D';                                                      _roundRandomNumberMEH = (round(random 3))+1;                                                      _addCaseMEH = 0;                                                      for '_i' from 0 to _roundRandomNumberMEH do                                                      {                                                            _addCaseMEH = addMissionEventHandler ['Draw3D', {}];                                                      };                                                      if(_addCaseMEH == _roundRandomNumberMEH) then                                                      {                                                            _addCaseMEHold = _addCaseMEH;                                                      }                                                      else                                                      {                                                            _log = format['EH_Draw3D 1:   %1 should be %2',_addCaseMEH,_roundRandomNumberMEH];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_MOD == 'AltisLife') then { _A3AHstring = _A3AHstring + "                                                      "; if(_RRH) then { _A3AHstring = _A3AHstring + "                                                      player removeAllEventHandlers 'Respawn';                                                      player addEventHandler ['Respawn', {_this call life_fnc_onPlayerRespawn}];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      player removeAllEventhandlers 'InventoryClosed';                                                      player addEventHandler ['InventoryClosed', {_this call life_fnc_inventoryClosed}];                                                      "; if(_RIO) then { _A3AHstring = _A3AHstring + "                                                      player removeAllEventhandlers 'InventoryOpened';                                                      player addEventHandler ['InventoryOpened', {_this call life_fnc_inventoryOpened}];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      player removeAllEventHandlers 'Killed';                                                      player addEventHandler ['Killed', {_this spawn life_fnc_onPlayerKilled}];                                                      "; if(_RHD) then { _A3AHstring = _A3AHstring + "                                                      player removeAllEventhandlers 'HandleDamage';                                                      player addEventHandler ['HandleDamage',{_this call life_fnc_HandleDamage;}];                                                      "; }; _A3AHstring = _A3AHstring + "                                                      player addEventHandler ['Take',{_this call life_fnc_onTakeItem}];                                                      player addEventHandler ['Fired',{_this call life_fnc_onFired}];                                                      if("+str _REH+") then {player removeAllEventhandlers 'Hit';};                                                      player removeAllEventHandlers 'Damaged';                                                      player removeAllEventHandlers 'Dammaged';                                                "; }; _A3AHstring = _A3AHstring + "                                          }                                          else                                          {                                                _addCaseMEHold = -1;                                                _addCaseHDMGold = -1;                                          };                                    }                                    else                                    {                                          _addCaseMEHold = -1;                                          _addCaseHDMGold = -1;                                    };                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 2;                  };                  if!(3 in "+_AH_RunCheckARRAY+") then                  {                        [_name,_puid,_admins] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _admins = _this select 2;                              disableSerialization;                              uiSleep 5;                              _badDialogsClose = "+str _badDialogsClose+";                              _badDialogsKICK = "+str _badDialogsKICK+";                              _allowedDialogs = "+str _allowedDialogs+";                              BIS_fnc_showNotification_queue=nil;                              missionnamespace setVariable['BIS_fnc_showNotification_queue',nil];                              {uiNamespace setVariable[_x,nil];} forEach ['RscDisplayRemoteMissions','RscDisplayDebugPublic','RscDisplayMovieInterrupt','RscDisplayArsenal'];                              _inventoryIds = [8,0,18,70,46,12,602,999,-1200,-1300,-1400,-1500,-1900,-8,-9,-10,-15,63,55,49,-6,24,-13,129,174,38500,7300];                              _inventoryDisplays = ['No display'];                              {_inventoryDisplays pushBack format['Display #%1',_x];} forEach _inventoryIds;                              _check = -1;                               _checkshouldbe = 14;                              _found54 = false;                              while {1 == 1} do                              {                                    if((_check != -1)&&(_check != _checkshouldbe)) then                                    {                                          _log = format['MenuBasedHackCheck broken! %1/%2',_check,_checkshouldbe];                                          [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    _check = 0;                                    {                                          if(!isNull (_x select 0)) then                                          {                                                _log = format['MenuBasedHack_%1',_x select 1];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                                ctrlDelete (_x select 0);                                          }                                          else                                          {                                                _check = _check + 1;                                          };                                    } forEach [                                          [(findDisplay 64) displayCtrl 101,'DISPLAY_64_C_101'],                                          [(findDisplay 64) displayCtrl 1002,'DISPLAY_64_C_1002'],                                          [(findDisplay 49) displayCtrl 0,'DISPLAY_49_C_0'],                                          [(findDisplay 49) displayCtrl 16100,'DISPLAY_49_C_16100'],                                          [(findDisplay 58) displayCtrl 16100,'DISPLAY_58_C_16100'],                                          [(findDisplay 58) displayCtrl 12000,'DISPLAY_58_C_12000'],                                          [(findDisplay 24) displayCtrl -50,'DISPLAY_24_C_-50'],                                          [(findDisplay 46) displayCtrl -50,'DISPLAY_46_C_-50'],                                          [(findDisplay 49) displayCtrl -50,'DISPLAY_49_C_-50'],                                          [(findDisplay 999) displayCtrl -50,'DISPLAY_999_C_-50'],                                          [(findDisplay 999) displayCtrl -95,'DISPLAY_999_C_-95'],                                          [(findDisplay 58) displayCtrl 24120,'DISPLAY_58_C_24120'],                                          [(findDisplay 12) displayCtrl 99991,'DISPLAY_12_C_99991'],                                          [(findDisplay 602) displayCtrl 989187,'DISPLAY_602_C_989187']                                    ];                                    {                                          if(!isNull (findDisplay _x)) then                                          {                                                _log = format['MenuBasedHack_D%1',_x];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    } forEach [-1338,-1337,17,19,30,32,45,56,64,69,71,125,132,155,156,162,165,166,167,1320,1321,2727,2928,2929,3030,316000,9899,0110,110];                                    if(!isNull (findDisplay 157)) then                                    {                                          _log = 'MenuBasedHack_D157 (or player opened the menu which hidden in the escape menu, at the bottom right corner.';                                          [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    {                                          _cc1 = uiNamespace getVariable _x;                                          if(!isNil '_cc1') then                                          {                                                _formatedcc1 = format['%1',_cc1];                                                if(_formatedcc1 != '<null>') then                                                {                                                      if(_formatedcc1 != 'No display') then                                                      {                                                            _log = format['Hacked: %1 - %2',_x,_cc1];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      }                                                      else                                                      {                                                            uiNamespace setVariable[_x,nil];                                                            _log = format['Hacked: %1 - %2',_x,_cc1];                                                            [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            (findDisplay 46) closeDisplay 0;                                                      };                                                };                                          };                                    } forEach ['RscDisplayRemoteMissions','RscDisplayDebugPublic','RscDisplayMovieInterrupt','RscDisplayArsenal'];                                    "; if(_UNC) then { _A3AHstring = _A3AHstring + "                                    if!(_puid in _admins) then                                    {                                          _sHq = missionnamespace getVariable 'BIS_fnc_showNotification_queue';                                          if(!isNil '_sHq') then                                          {                                                if(str _sHq  == '[]') then                                                {                                                      BIS_fnc_showNotification_queue=nil;                                                      missionnamespace setVariable['BIS_fnc_showNotification_queue',nil];                                                }                                                else                                                {                                                      _log = format['Hacked: showNotification - %1',_sHq];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    "; }; _A3AHstring = _A3AHstring + "                                    if(!isNull (findDisplay 148)) then                                    {                                          if((lbSize 104)-1 > 3) exitWith {                                                _log = 'Hacked: RscDisplayConfigureControllers';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                                    {                                          _lbSize = lbSize _x;                                          if(_lbSize > 0) then {                                                _log = format['lbSize %1 == %2',_x,_lbSize];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                lbClear _x;                                          };                                    } forEach [101,102];                                    if(!_found54) then                                    {                                          _display = findDisplay 54;                                          if(!isNull _display) then                                          {                                                {                                                      if (_x && !isNull _display) then                                                      {                                                            if(_found54)exitWith {};                                                            [] spawn {                                                                  disableSerialization;                                                                  while {1 == 1} do                                                                  {                                                                        waitUntil {!isNull findDisplay 54};                                                                        _display = findDisplay 54;                                                                        _txt = _display displayCtrl 1001;                                                                        _txt ctrlSetText format['%1',localize 'STR_A3_RscDisplayInsertMarker_Title'];                                                                        _txt ctrlCommit 0;                                                                        _btn1 = _display displayCtrl 1;                                                                        _btn1 buttonSetAction '';                                                                        _btn1 ctrlCommit 0;                                                                        _btn2 = _display displayCtrl 2;                                                                        _btn2 buttonSetAction '';                                                                        _btn2 ctrlCommit 0;                                                                  };                                                            };                                                            _found54 = true;                                                      };                                                } forEach [                                                      (toLower ctrlText (_display displayCtrl 1001) != toLower localize 'STR_A3_RscDisplayInsertMarker_Title'),                                                      {if (buttonAction (_display displayCtrl _x) != '') exitWith {true}; false} forEach [1,2]                                                ];                                          };                                    };                                    _dsp163 = findDisplay 163;                                    if(!isNull _dsp163) then                                    {                                          (_dsp163 displayCtrl 101) ctrlRemoveAllEventHandlers 'LBDblClick';                                          (_dsp163 displayCtrl 101) ctrlRemoveAllEventHandlers 'LBSelChanged';                                          if((toLower ctrlText (_dsp163 displayCtrl 1000) != toLower localize 'STR_DISP_OPTIONS_SCHEME') || (buttonAction (_dsp163 displayCtrl 1) != '') || (buttonAction (_dsp163 displayCtrl 2) != '')) then                                          {                                                _log = 'Hacked: RscDisplayControlSchemes';                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                                    _RscDisplayConfigureAction = uiNamespace getVariable 'RscDisplayConfigureAction';                                    if(!isNil '_RscDisplayConfigureAction') then                                    {                                          _formatedRscDisplayConfigureAction = format['%1',_RscDisplayConfigureAction];                                          if(_formatedRscDisplayConfigureAction != '<null>') then                                          {                                                if(_formatedRscDisplayConfigureAction != 'No display') then                                                {                                                      _actions = [buttonAction 1,buttonAction 107,buttonAction 104,buttonAction 106,buttonAction 109,buttonAction 105,buttonAction 108];                                                      _title = ctrlText 1000;                                                      if(_title != localize '$STR_A3_RscDisplayConfigureAction_Title') exitWith {                                                            _log = 'Hacked: RscDisplayConfigureAction';                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      {                                                            if(_x != '') exitWith {                                                                  _log = 'Hacked: RscDisplayConfigureAction';                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      } forEach _actions;                                                };                                          };                                    };                                    _c101txt = ctrlText 101;                                    if(_c101txt != '') then {                                          _log = format['D_167_C_101: %1',_c101txt];                                          [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    _fkd = 'no';{if(!isNull (findDisplay _x)) exitWith {_fkd = str _x;};} forEach _badDialogsKICK;                                    if(_fkd != 'no') then                                    {                                          _log = format['BadDisplayID: %1',_fkd];                                          [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    {if(!isNull (findDisplay _x)) then {closeDialog 0;(findDisplay _x) closeDisplay 0;closeDialog 0;closeDialog 0;};} forEach _badDialogsClose;                                    "; if(_UDW) then { _A3AHstring = _A3AHstring + "                                          _checkAllowed = _allowedDialogs;                                          "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                _checkAllowed = _allowedDialogs + [-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-1500,-1900,-666,300,301,302,303,304,13377];                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_MOD == 'AltisLife') then { _A3AHstring = _A3AHstring + "                                                _checkAllowed = _allowedDialogs + [2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2300,2400,2520,2600,2620,2650,2700,2800,2900,3000,3100,3500,7300,38200,38300,38400,38500,39400];                                          "; }; _A3AHstring = _A3AHstring + "                                          _break = true;                                          {if(!isNull (findDisplay _x)) exitWith {_break = false;};} forEach _checkAllowed;                                          "; if(_GCC) then { _A3AHstring = _A3AHstring + "                                          if(!isNull (findDisplay 602)) then                                          {                                                _baddisplays = [];                                                {                                                      _strCdisplay = str _x;                                                      if(_strCdisplay in ['Display #4','Display #5','Display #6']) exitWith                                                      {                                                            findDisplay 4 closeDisplay 0;                                                            findDisplay 5 closeDisplay 0;                                                            findDisplay 6 closeDisplay 0;                                                            findDisplay 602 closeDisplay 0;                                                            closeDialog 0;closeDialog 0;closeDialog 0;                                                      };                                                      if!(_strCdisplay in _inventoryDisplays) then                                                      {                                                            _baddisplays pushBack _strCdisplay;                                                            _break = true;                                                      };                                                } forEach allDisplays;                                                if!(_baddisplays isEqualTo []) then                                                {                                                      if('Display #72' in _baddisplays) then                                                      {                                                            _log = format['BadInventory Displays: %1   (72 is Lystic Hack v3)',_baddisplays];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      }                                                      else                                                      {                                                            _log = format['BadInventory Displays: %1   (inventory closed)',_baddisplays];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                      };                                                };                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          if(_break) then {closeDialog 0;closeDialog 0;closeDialog 0;};                                    "; }; _A3AHstring = _A3AHstring + "                                    uiSleep 0.25;                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 3;                  };                  if!(4 in "+_AH_RunCheckARRAY+") then                  {                        "; if(_CC2) then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    disableSerialization;                                    _verybadStrings = "+str _verybadStrings+";                                    _tmpverybadStrings = [];{_tmpverybadStrings pushBack (toLower _x);} forEach _verybadStrings;_verybadStrings = _tmpverybadStrings;                                    _excludeTxTArray = [];                                    _tmpexcludeTxTArray = [];{_tmpexcludeTxTArray pushBack (toLower _x);} forEach _excludeTxTArray;_excludeTxTArray = _tmpexcludeTxTArray;                                    _fnc_checkExcludedStrings = {                                          _state = true;                                          if(_excludeTxTArray isEqualTo []) exitWith {_state = true;};                                          {if (_this find _x > -1) exitWith {_state = false;};}      forEach _excludeTxTArray;                                          _state                                    };                                    _tempcountallDisplays = 0;                                    while {1 == 1} do                                    {                                          if!(_tempcountallDisplays isEqualTo (count allDisplays)) then                                          {                                                {                                                      _display = _x;                                                      _allCtrls = allControls _display;                                                      {                                                            _control = _x;                                                            _controltype = ctrlType _control;                                                            if(_controltype isEqualTo 5) then                                                            {                                                                  _size = lbSize _control;                                                                  if(_size > 0) then                                                                  {                                                                        for '_i' from 0 to (_size-1) do                                                                        {                                                                              _lbtxt = _control lbText _i;                                                                              _lowerlbtxt = toLower _lbtxt;                                                                              if(_lowerlbtxt call _fnc_checkExcludedStrings) then                                                                              {                                                                                    {                                                                                          if(_lowerlbtxt find _x > -1) then                                                                                          {                                                                                                _log = format['BadlbText: %1 on %2 %3   (set _CC2 = false; in run.sqf if this bothers you.)',_lbtxt,_display,_control];                                                                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                                                [] spawn "+_AHKickOFF+";                                                                                          };                                                                                    } forEach _verybadStrings;                                                                              };                                                                        };                                                                  };                                                            }                                                            else                                                            {                                                                  if!(_controltype in [0,3,4,8,9,15,42,81,102]) then                                                                  {                                                                        _ctrlTxt = ctrlText _control;                                                                        _lowerctrlTxt = toLower _ctrlTxt;                                                                        if(_lowerctrlTxt call _fnc_checkExcludedStrings) then                                                                        {                                                                              {                                                                                    if(_lowerctrlTxt find _x > -1) then                                                                                    {                                                                                          _log = format['BadCtrlText: %1 on %2 %3   (set _CC2 = false; in run.sqf if this bothers you.)',_ctrlTxt,_display,_control];                                                                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                                          [] spawn "+_AHKickOFF+";                                                                                    };                                                                              } forEach _verybadStrings;                                                                        };                                                                  };                                                            };                                                      } forEach _allCtrls;                                                } forEach allDisplays;                                          };                                          _tempcountallDisplays = count allDisplays;                                          uiSleep 1;                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "; if(_UV2) then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _verybadStrings = "+str _verybadStrings+";                                    _tmpverybadStrings = [];{_tmpverybadStrings pushBack (toLower _x);} forEach _verybadStrings;_verybadStrings = _tmpverybadStrings;                                    _allRandomGenVars = "+str _allRandomGenVars+";                                    while {1 == 1} do                                    {                                          _timer1 = diag_tickTime;                                                                                    _allMissionNameSpaceVars = (allVariables missionNamespace);                                          _allMissionNameSpaceVars = _allMissionNameSpaceVars - ['pvah_adminreq'];                                          _allMissionNameSpaceVars = _allMissionNameSpaceVars - ['fnc_ammoforvehicles'];                                          _allMissionNameSpaceVars = _allMissionNameSpaceVars - ['bpdcode'];                                          {_allMissionNameSpaceVars = _allMissionNameSpaceVars - [_x];} forEach _allRandomGenVars;                                          {                                                _m = missionNamespace getVariable _x;                                                if(!isNil '_m') then                                                {                                                      _var = _x;                                                      _varLow = toLower _x;                                                      _varcontent = toLower(str _m);                                                      {                                                            if(_varLow find _x > -1) then                                                            {                                                                  _log = format['BadVar: %1   found: %2   (set _UV2 = false; in run.sqf if this bothers you.)',_var,_x];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                            "; if(_V2C) then { _A3AHstring = _A3AHstring + "                                                                  if(_varcontent find _x > -1) then                                                                  {                                                                        _log = format['BadVarContent: %1   found: %2   (set _V2C = false; in run.sqf if this bothers you.)',_var,_x];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            "; }; _A3AHstring = _A3AHstring + "                                                      } forEach _verybadStrings;                                                };                                          } forEach _allMissionNameSpaceVars;                                                                                    _sleeptimer = ((diag_tickTime - _timer1)*2)+5;                                          uiSleep _sleeptimer;                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "; if((_UBV)||(_UBF)) then { _A3AHstring = _A3AHstring + "                              [_name,_puid,_admins] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _admins = _this select 2;                                    "; if(_UBV) then { _A3AHstring = _A3AHstring + "                                    _badVariables =                                    [                                          'BIS_fnc_dbg_reminder_value','BIS_fnc_dbg_reminder','FND_fnc_subs','setcash','Dummy_Ghost','entf','c_player','check_loaded','mein1','LY_Menu',                                          'showcommandingMenu','disableUserInput','local','forEach','nearEntities','round','onEachFrame','a','imgoingnukeyou','fnc_usec_damageHandler',                                          'Status_BB','TZ_BB_A3','TZ_BB_KB_Hint','TZ_BB_BindHandler','AH_BRAZZERS_TZ_BB','kamakazi_lystic','fuckfest','LYSTIC_MENU_LOADED','D_AMEZ_COA',                                          'Intro','Repair','Heal','T3le','TNK','I_like_turtles','BIGM','GMod','E3p','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS',                                          'lel','vars','PSwap','toLower_new','BCast','thfile','tlmadminrq','infiSTARBLACK','carepkg','scrollAim','BlurExec','sbpc','CALLRE',                                          'quake','menu_run','ZedProtect','actid1','vehicles1','MapClicked','MapClickedPosX','MouseUpEvent','scrollPlayerlist','keypress_xxx','D_AMEZ_COA',                                          'envi','G_A_N_G_S_T_A','ZoombiesCar','timebypass','returnString_z','isori','tangrowth27','PVAH_AdminRequest','AH_OFF_LOL','b','infiSTAR_fillRE',                                          'qwak','infoe','font','title_dialog','sexymenu_adds_Star','boolean_1','initre337','skype_option','bleh','magnetomortal','fnc_allunits','sbp',                                          'PV_IAdminMenuCode','PVAH_WriteLogRequest','skype_img','Lhacks','Lpic','LtToTheRacker','Lexstr','take1','Called','epochExec','sdgff4535hfgvcxghn',                                          'adadawer24_1337','fsdddInfectLOL','W_O_O_K_I_E_Car_RE','kW_O_O_K_I_E_Go_Fast','epchDeleted','lystobindkeys','lystoKeypress','fnc_usec_unconscious',                                          'toggle_1','shiftMenu','dbClicked','b_loop','re_loop','v_bowen','bowen','melee_startAttack','asdasdasd','antihax2','PV_AdminMenuCode','AdminLoadOK',                                          'AdminLoadOKAY','PV_TMPBAN','T_o_g_g_l_e_BB','fixMenu','PV_AdminMenuCodee','AdminPlayer','PVAH_AdminRequestVariable','epochBackpack','JME_Red',                                          'JME_MENU_Sub','JME_menu_title','JME_Sub','JME_OPTIONS','god','heal','grass','fatguybeingchasedbyalion','night','day','infammo','nvg','thermal',                                          'Keybinds','fredtargetkill','loopfredtpyoutome','epochTp','AdminLst','BB_Pr0_Esp','BBProEsp','epochMapMP','CALLRESVR','EPOCH_spawnVehicle_PVS',                                          'adminlite','adminlitez','antihacklite','bp','inSub','scroll_m_init_star','markerCount','zombies','startmenu_star','LystoDone','MOD_EPOCH',                                          'Admin_Lite_Menu','admingod','adminESPicons','fnc_MapIcons_infiSTAR','BIS_MPF_remoteExecutionServer4','adminadd','shnext','infiSTAR_fill_Weapons',                                          'adminZedshld','adminAntiAggro','admin_vehicleboost','admin_low_terrain','admin_debug','admincrate','exstr','nlist','PV_AdminMainCode','TPCOUNTER',                                          'PVDZ_Hangender','fn_filter','vehiList','Remexec_Bitch','zeus_star','igodokxtt','tmmenu','AntihackScrollwheel','survcam','infiniteammo','PVAH_AHTEMPBAN',                                          'lalf','toggle','iammox','telep','dayzlogin3','dayzlogin4','changeBITCHinstantly','antiAggro_zeds','BigFuckinBullets','abcdefGEH','adminicons',                                          'fn_esp','aW5maVNUQVI_re_1','passcheck','isInSub','qodmotmizngoasdommy','ozpswhyx','xdistance','wiglegsuckscock','diz_is_real__i_n_f_i_S_T_A_R',                                          'pic','veh','unitList','list_wrecked','addgun','ESP','BIS_fnc_3dCredits_n','dayzforce_save','ViLayer','blackhawk_sex','activeITEMlist','items1',                                          'adgnafgnasfnadfgnafgn','Metallica_infiSTAR_hax_toggled','activeITEMlistanzahl','xyzaa','iBeFlying','rem','DAYZ_CA1_Lollipops','HMDIR','vehC',                                          'HDIR','carg0d','init_Fncvwr_menu_star','altstate','black1ist','ARGT_JUMP','ARGT_KEYDOWN','ARGT_JUMP_w','ARGT_JUMP_a','bpmenu','color_black',                                          'p','fffffffffff','markPos','pos','TentS','VL','MV','monky','qopfkqpofqk','monkytp','pbx','nametagThread','spawnmenu','sceptile15','sandshrew',                                          'mk2','i','j','v','fuckmegrandma','mehatingjews','TTT5OptionNR','zombieDistanceScreen','cargodz','R3m0te_RATSifni','wepmenu','admin_d0','RAINBOWREMEXECVEH',                                          'omgwtfbbq','namePlayer','thingtoattachto','HaxSmokeOn','testIndex','g0d','spawnvehicles_star','kill_all_star','sCode','dklilawedve','peter_so_fly_CUS',                                          'selecteditem','moptions','delaymenu','gluemenu','g0dmode','cargod','infiSTAR_fillHax','itemmenu','gmadmin','fapEsp','mapclick','VAGINA_secret',                                          'spawnweapons1','abcd','skinmenu','playericons','changebackpack','keymenu','godall','theKeyControl','infiSTAR_FILLPLAYER','whitelist','pfEpochTele',                                          'custom_clothing','img','surrmenu','footSpeedIndex','ctrl_onKeyDown','plrshldblcklst','DEV_ConsoleOpen','executeglobal','cursoresp','Asdf','planeGroup',                                          'teepee','spwnwpn','musekeys','dontAddToTheArray','morphtoanimals','aesp','LOKI_GUI_Key_Color','Monky_initMenu','tMenu','recon','curPos',                                          'playerDistanceScreen','ihatelife','debugConsoleIndex','MY_KEYDOWN_FNC','pathtoscrdir','Bowen_RANDSTR','ProDayz','idonteven','walrein820','RandomEx',                                          'TAG_onKeyDown','changestats','derp123','heel','rangelol','unitsmenu','xZombieBait','plrshldblckls','ARGT_JUMP_s','ARGT_JUMP_d','globalplaya','ALL_MAGS_TO_SEARCH',                                          'shnmenu','xtags','pm','lmzsjgnas','vm','bowonkys','glueallnigga','hotkeymenu','Monky_hax_toggled','espfnc','playeresp','zany','dfgjafafsafccccasd',                                          'atext','boost','nd','vspeed','Ug8YtyGyvguGF','inv','rspwn','pList','loldami','T','bowonky','aimbott','Admin_Layout','markeresp','allMrk','MakeRandomSpace',                                          'helpmenu','godlol','rustlinginit','qofjqpofq','invall','initarr','reinit','byebyezombies','admin_toggled','fn_ProcessDiaryLink','ALexc','DAYZ_CREATEVEHICLE',                                          'Monky_funcs_inited','FUK_da_target','damihakeplz','damikeyz_veryhawt','mapopt','hangender','slag','jizz','kkk','ebay_har','sceptile279','TargetPlayer',                                          'tell_me_more_infiSTAR','airborne_spawn_vehicle_infiSTAR','sxy_list_stored','advert_SSH','antiantiantiantih4x','Flare8','Flare7','SuperAdmin_MENU',                                          'bl4ck1ist','keybinds','actualunit','mark_player','unitList_vec','yo2','actualunit_vec','typeVec','mark','r_menu','hfghfg','vhnlist','work','Intro',                                          'yo3','q','yo4','k','cTargetPos','cpbLoops','cpLoopsDelay','Flare','Flare1','Flare2','Flare3','Flare4','Flare5','Flare6','kanghaskhan','palkia',                                          'eExec_commmand','cockasdashdioh','fsdandposanpsdaon','antiloop','anti','spawn_explosion_target_ebay','whatisthis4','ratingloop_star','epochRemoteNukeAll',                                          'PVAH_admin_rq','PVAH_writelog_rq','sandslash','muk','pidgeotto','charmeleon','pidgey','lapras','LYST1C_UB3R_L33T_Item','MathItem','fapLayer','cooldown',                                          'raichu','infiSTAR_chewSTAR_dayz_1','infi_STAR_output','infi_STAR_code_stored','keybindings','keypress','menu_toggle_on','dayz_godmode','aiUnit',                                          'MENUTITLE','wierdo','runHack','Dwarden','poalmgoasmzxuhnotx','ealxogmniaxhj','firstrun','ohhpz','fn_genStrFront','shazbot1','cip','Armor1','GMod',                                          'kickable','stop','possible','friendlies','hacks','main','mapscanrad','maphalf','DelaySelected','SelectDelay','GlobalSleep','vehD','ALL_WEPS_TO_SEARCH',                                          'jopamenu','ggggg','tlm','Listw','toggle_keyEH','infammoON','pu','chute','dayzforce_savex','PVDZ_AdminMenuCode','PVDZ_SUPER_AdminList','DarkwrathBackpack',                                          'PVDZ_hackerLog','BP_OnPlayerLogin','material','mapEnabled','markerThread','addedPlayers','playershield','spawnitems1','sceptile27','Proceed_BB',                                          'ESPEnabled','wpnbox','fnc_temp','MMYmenu_stored','VMmenu_stored','LVMmenu_stored','BIS_MPF_ServerPersistentCallsArray','PV_CHECK','admin_animate1',                                          'patharray','ZobieDistanceStat','infiSTARBOTxxx','keyspressed','fT','tpTarget','HumanityVal','yanma','absol','SimpleMapHackCount','keyp',                                          'aggron','magazines_spawn','weapons_spawn','backpack_spawn','backpackitem_spawn','keybindings_exec','keypress_exec','MajorHageAssFuckinfBulletsDude',                                          'Wannahaveexplosivesforbullets','TheTargetedFuckingPlayerDude','haHaFuckAntiHakcsManIbypasDatShit','aintNoAntiHackCatchMyVars','objMYPlayer',                                          'Awwwinvisibilty','vehiclebro','wtfyisthisshithere','terrainchangintime','Stats','menu','ssdfsdhsdfh','onisinfiniteammobra','youwantgodmodebro',                                          'yothefuckingplayerishere','Namey','sendmsg12','jkh','DELETE_THIS','move_forward','leftAndRight','forwardAndBackward','upAndDown','distanceFromGround',                                          'hoverPos','hovering','bulletcamon','cheatlist','espOn','removegrass','timeday','infammo','norekoil','nocollide','esp2ez','fastwalk','entupautowalk',                                          'BensWalker','dropnear','executer','killme','magnetmenu','loadmain','magnet','loadMenu','refreshPlayers','ALREADYRAN','players','BigBenBackpack',                                          'sendMessage','newMessage','W34p0ns','amm0','Att4chm3nt','F0od_Dr1nk','M3d1c4l','T0ol_it3ms','B4ckp4cks','It3m5','Cl0th1ng','walkloc','nwaf','cherno',                                          'cherno_resident','cherno_resident_2','dubky','oaks','swaf','swmb','getX','PlayerShowDistance','M_e_n_u_2','colorme','keybindloop','Tractor_Time',                                          'murkrow','noctowl','isExecuted','piloswine','AddPlayersToMap','markers','miltank','GearAdd','GearRemove','Malvsm','Malcars','malfly','keyForward',                                          'PermDialogSelected','TempDialogSelected','AdminDialogList','pfKeygen','pfScanUnits','pfPickPlayer','pfshnext','pfnlist','pfselecteditem','pfshnmenu',                                          'pfPlayerMonitor','pfPlayersToMonitor','pfShowPlayerMonitor','pfPlayerMonitorMutex','marker','JJJJ_MMMM___EEEEEEE_INIT_MENU','E_X_T_A_S_Y_Init_Menu',                                          'monkaiinsalt','monkaiin','part88','adminKeybinds','PV_DevUIDs','fapEspGroup','Repair','RepairIT','rainbowTarget','rainbowTarget1','rainbowTarget2',                                          'rainbowTarget3','letmeknow','VehicleMenue','Menue_Vehicle','my_anus_hurtz','life_no_injection','Tonic_has_a_gaping_vagina','teletoplr','telet',                                          'ygurv1f2','BIGM','E3p','T3le','fnc_PVAH_AdminReq','infiSTAR_MAIN_CODE','MAIN_CODE_INJECTED','D34DXH34RT_E5P','Arsenal','Jme_Is_God','B0X_CANN0N_T0GGLE',                                          'PL4YER_CANN0N_T0GGLE','aim','HOLY_FUCK_FDKFHSDJFHSDKJ_vehicles_m','lazy_ILHA_is_lazy','POOP_Item','die_menu_esp_v1','XXMMWW_main_menu','MM_150',                                          'BIS_tracedShooter','JME_HAS_A_GIANT_DONG','nuke_vars','nukepos','fuckfest','fuckfestv2','FAG_NEON','Deverts_keyp','jfkdfjdfjdsfjdsfjkjflfjdlfjdlfjru_keyp',                                          'eroticTxt','asdadaio9d0ua298d2a0dza2','trap','boomgoats','morphme','morph','blfor','blfor2','blfor3','rdfor','rdfor2','rdfor3','napa','civ',                                          'Detected_Remote_Execution','keybindz','PEDO_IS_FUKED','MAINON','PLAYERON','PLAYEROFFNEXT1','PLAYERNEXT2','ALTISLIFEON','ALTISLIFEOFFNEXT1','ALTISLIFENEXT2',                                          'ALTISLIFEOFFNEXT2','ALTISLIFENEXT3','FUNMENUON','FUNMENUOFFNEXT1','FUNMENUNEXT2','FUNMENUOFFNEXT2','FUNMENUNEXT3','MAINOFF','PLAYEROFF','ALTISLIFEOFF',                                          'FUNMENUOFF','H4X_Miriweth_Menu_Click_Hax','IrEcOCMmeNEnd_God_MODE','TTTT_IIII___TTTTTTT_REPGAs','EC_GOD_TOGGLE','admin_d0_server','PedoMazing_Friends',                                          'ly5t1c','JJMMEE_Swagger','Bobsp','Speed_Hack_cus','pList_star_peter_cus','RGB','neo_throwing','Menu_I_Run_Color_LP','Blue_I_Color_LP','box','bombs',                                          'Orange_I_Color_LP','Menu_I_On_Color_LP','Menu_I_Off_Color_LP','Speed_Hack_cus','cus_SPEED_DOWN','pnc','SpyglassFakeTrigger','infammook','input_text',                                          'Tit_Choppertimer','GLASS911_Executer_for_menu','E5P','ThirtySix_Unlim_Ammo','ThirtySix_God','JJMMEE_INIT_MENU','menuheader','life_fnc_sessionUpdateCalled',                                          'blu_t_color_LP','FAG_RedSoldiers','titles_n_shit','eXecutorr','menu_headers','player_list','refresh_players','fn_loadMap','weapon_list','vehicle_list','get_display',                                          'create_display','CTRL_BTN_LIST','execMapFunc','mapFunc','OPEN_LISTS','init_menu','biggies_white_tex','Abraxas_Unl_Life','Abraxas_Life','waitFor','Mystic_ESP',                                          'biggies_menu_open','scriptex3cuter','rym3nucl0s3','eses_alis','PersonWhomMadeThisCorroded_Menu','Flo_Simon_KillPopUp','keybindz2','text_colour','key_combos_ftw',                                          'PlayerInfiniteAmmo','Im_a_Variable','aaaa','fnc_LBDblClick_RIGHT','OMFG_MENU','N_6','RscCombo_2100_mini','RscListbox_1501_mini','andy_suicide',                                          'JxMxE_hide','JME_Keybinds','JME_has_yet_to_fuck_this_shit','JME_deleteC','JME_Tele','JME_ANAL_PLOW','JME_M_E_N_U_initMenu','JME_M_E_N_U_hax_toggled','W_O_O_K_I_E_FUD_Pro_RE','W_O_O_K_I_E_FUD_Car_RE','W_O_O_K_I_E_FUD_Car_RE',                                          'JxMxE_Veh_M','JxMxE_LifeCash500k','W_O_O_K_I_E_FUD_FuckUp_GunStore','W_O_O_K_I_E_FUD_M_E_N_U_initMenu','W_O_O_K_I_E_FuckUp_GunStore_a','JME_KillCursor','JME_OPTIONS','JME_M_E_N_U_fill_TROLLmenu','ASSPLUNGE','FOXBYPASS','POLICE_IN_HELICOPTA',                                          'JxMxE_EBRP','W_O_O_K_I_E_M_E_N_U_funcs_inited','Menu_Init_Lol','E_X_T_A_S_Y_Atm','W_O_O_K_I_E_Pro_RE','W_O_O_K_I_E_Debug_Mon','W_O_O_K_I_E_Debug_1337','Veh_S_P_A_W_N_Shitt','sfsefse','tw4etinitMenu','tw4etgetControl',                                          'JxMxEsp','JxMxE_GOD','JxMxE_Heal','efr4243234','sdfwesrfwesf233','sdgff4535hfgvcxghn','adadawer24_1337','lkjhgfuyhgfd','E_X_T_A_S_Y_M_E_N_U_funcs_inited','dayz_serverObjectMonitor','fsfgdggdzgfd','fsdddInfectLOL','Wookie_List',                                          'JxMxE_TP','Wookie_Pro_RE','Wookie_Car_RE','Wookie_Debug_Mon','faze_funcs_inited','advertising_banner_infiSTAR','atext_star_xa','Monky_hax_dbclick','qopfkqpofqk','debug_star_colorful','AntiAntiAntiAntiHax','antiantiantiantih4x',                                          'JxMxE_Infect','hub','scrollinit','gfYJV','Lystic_LMAOOOOOOOOOOOOOOOOOOO','Lystic_Re','Lysto_Lyst','E_X_T_A_S_Y_Keybinds','Menulocations','Lystic_Init','scroll_m_init_star','exstr1','pathtoscrdir3','Monky_funcs_inited',                                          'JxMxE_secret','Monky_initMenu','player_zombieCheck','E_X_T_A_S_Y_Recoil','godlol','playericons','abcdefGEH','wierdo','go_invisible_infiSTAR','serverObjectMonitor','enamearr','initarr3','locdb','sCode','infAmmoIndex',                                          'nukeDONEstar','Wookie_List','Wookie_Pro_RE','FUCKTONIC','E_X_T_A_S_Y_FuckUp_GunStore_a','E_X_T_A_S_Y_Cash_1k_t','E_X_T_A_S_Y_Cash_a','E_X_T_A_S_Y_LicenseDrive','E_X_T_A_S_Y_Menu_LOOOOOOOOOL','Metallica_vehicleg0dv3_infiSTAR',                                          'JJJJ_MMMM___EEEEEEE_INIT_MENU','JJJJ_MMMM___EEEEEEE_GAPER','JJJJ_MMMM___EEEEEEE_SMOKExWEEDxEVERYDAY_BUM_RAPE','JJJJ_MMMM___EEEEEEE_OPTIONS','JJJJ_MMMM___EEEEEEE_M_E_N_U_fill_Target','E3p',                                          'Jesus_MODE','ESP','MissileStrike','AL_Liscenses','NoIllegal','NoWeight','m0nkyaatp_sadksadxa','m0nkyaatp_RANDSTR','myvar23','player_adminlevel','TNK','I_like_turtles',                                          'BIGM','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTAR1','GMod','No_No_No_Tonic_likes_A_Big_Fat_Sheep_Cock_Right_in_the_bum_G0d_Mode',                                          'Sload','T3le','life_no_injection','Tonic_has_a_gaping_vagina','my_anus_hurtz','aKFerm','aKMMenu','aKTitans','aKLikeaG0d','riasgremory_G0d_Mode','aKCarG0d','riasgremory_Car_Jesus','aKE5p','riasgremory_isseilol','aKPMark',                                          'riasgremory_Noobs','riasgremory_Bitches','riasgremory_Map_Markers','aKUnMmo','jenesuispasuncheateur_unamo','aKVoit','Loljesaispasquoiecriremdr','isseigremory','gremorysama','aKTaCu','aKCardetroy','aKGetKey','aKKillcursor',                                          'aKNoEscort','aKEscort','aKtroll','aKTPall','aKUnrestrain','aKNoEscortMe','aKNoTaze','aKJailplayer','aKLisense','riasgremory_titans_shit_reold','Tonic_merde','jaimepaslepoisin_HLEAL','TTTT_IIII___TTTTTTT_RAP_FR','TTTT_IIII___TTTTTTT_REPGA',                                          'TTTT_IIII___TTTTTTT_REPGAs','jaimepaslepoisin_HLEAL','Root_Main4','Root_Pistol4','Root_Rifle4','Root_Machinegun4','Root_Sniper4','Root_Launcher4','Root_Attachement4'                                    ];                                    if(_puid in _admins) then                                    {                                          {                                                _missionNamespace = missionNamespace getVariable _x;                                                if(!isNil '_missionNamespace') then                                                {                                                      missionNamespace setVariable [_x,nil];                                                };                                                _uiNamespace = uiNamespace getVariable _x;                                                if(!isNil '_uiNamespace') then                                                {                                                      uiNamespace setVariable [_x,nil];                                                };                                                _profileNamespace = profileNamespace getVariable _x;                                                if(!isNil '_profileNamespace') then                                                {                                                      profileNamespace setVariable [_x,nil];                                                };                                          } forEach _badVariables;                                          saveProfileNamespace;                                    };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_UBF) then { _A3AHstring = _A3AHstring + "                                    _filechecktimer = diag_tickTime;                                    _txtsqfA =                                    [                                          '1.sqf','3.sqf','qa.sqf','gknova61_money.sqf','invi.sqf','Krypto.sqf','Dta\mhm.sqf','Newscroll.sqf',                                          'test\jude\3dollar\blub.sqf','lel.sqf','_src\Load.sqf','scripts\jmepoch.sqf','Det\Test.sqf','test\mhm.sqf',                                          'Jowin.sqf','FreundeMod\altea.sqf','dracau18scripts.sqf','CraftLourens.sqf','My Menu Collection\Wookie\mongoose.sqf',                                          'menu\menuext.sqf','LystoArma3\Lystic.sqf','LystoArma3\antiantihax.sqf','rouvenk.sqf','chub\start.sqf','Whippy\playerTools.sqf',                                          'rouven33.sqf','Addons\temp.sqf','hihi.sqf','test.sqf','\Life41337\init.sqf','swagre.sqf','huki.sqf','y.sqf',                                          'Dta\nom.sqf','AnalFuckMeOnATable.sqf','JH\Action.sqf','V4Run.sqf','_src\test.sqf','ScriptName.sqf','999999999999999999999999999.sqf',                                          'RommelV1\Rexecv1.sqf','abra.sqf','jmepochV2.sqf','FuryV3.sqf','69.sqf'                                    ];                                    {_txtsqfA pushBack format['%1.sqf',_x];} forEach [0,1,2,3,4,5,6,7,8,9,10,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];                                    _otherA =                                    [                                          'debug_console.dll','debug_consolee.dll','tbb4malloc_bi.dll','Xenos.exe','Xenos64.exe','fraps.dll','youtube.dll','_CommonRedist\DirectX\Config.cab',                                          'DirectX\Config.cab','G-e-F_Menu\StartGeF.dta','Bonus\Soundtrack\Win\12_Wins.dta','_CommonRedist\DirectX\Jun2010\Apr2005_d3dx9_24_x64.cab',                                          'Bonus\Soundtrack\clickSound.ogg','G-e-F_Menu\G-e-F_HackConfig.ini','Launcher\kernel_x86.dll','DLL\DatMalloc.dll','\G-e-F_HackConfig.ini',                                          'Dta\Screens.bin'                                    ];                                    "; }; _A3AHstring = _A3AHstring + "                                    while {1 == 1} do                                    {                                          _timer1 = diag_tickTime;                                          "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                          _avpnamespace = (allVariables parsingNamespace);                                          if!(_avpnamespace isEqualTo []) then                                          {                                                _log = format['BadVariables in parsingNamespace: %1',_avpnamespace];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_UBF) then { _A3AHstring = _A3AHstring + "                                          if(_filechecktimer < diag_tickTime) then                                          {                                                _filechecktimer = diag_tickTime + 300;                                                diag_log 'IGNORE THIS';                                                diag_log '--------------------------------------------------';                                                preProcessFileLineNumbers 'Scan completed, badcontent.sqf';                                                {                                                      _f = preprocessFileLineNumbers _x;                                                      if(_f != '') then                                                      {                                                            _log = format['BadFile1: %1 - %2',_x,_f];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      uiSleep 0.1;                                                } forEach _txtsqfA;                                                {                                                      _f = preprocessFileLineNumbers _x;                                                      if(_f != '') then                                                      {                                                            _log = format['BadFile2: %1',_x];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                      uiSleep 0.1;                                                } forEach _otherA;                                                diag_log '--------------------------------------------------';                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_UBV) then { _A3AHstring = _A3AHstring + "                                          {                                                if(!isNil _x) then                                                {                                                      _log = format['BadVar: %1',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _vc = missionNamespace getVariable _x;                                                if(!isNil '_vc') then                                                {                                                      _log = format['BadVar in missionNamespace: %1 - %2',_x,_vc];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _vc = uiNamespace getVariable _x;                                                if(!isNil '_vc') then                                                {                                                      _log = format['BadVar in uiNamespace: %1 - %2',_x,_vc];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                _vc = profileNamespace getVariable _x;                                                if(!isNil '_vc') then                                                {                                                      profileNamespace setVariable [_x,nil];saveProfileNamespace;                                                      _log = format['BadVar in profileNamespace: %1 - %2',_x,_vc];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach _badVariables;                                          "; }; _A3AHstring = _A3AHstring + "                                          _sleeptimer = ((diag_tickTime - _timer1)*2)+1;                                          uiSleep _sleeptimer;                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 4;                  };                  if!(5 in "+_AH_RunCheckARRAY+") then                  {                        "; if(_GCC || _C00 || _C12 || _C18 || _C24 || _C46 || _C70) then { _A3AHstring = _A3AHstring + "                        [_name,_puid] spawn {                              disableSerialization;                              _name = _this select 0;                              _puid = _this select 1;                              uiSleep 10;                              "; if(_GCC) then { _A3AHstring = _A3AHstring + "                              _badcontrols602 = false;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C00) then { _A3AHstring = _A3AHstring + "                              _badcontrols00 = false;                              _00controlsO =                              [                                    'Control #114998','Control #115099','Control #114999','Control #115000','Control #115001','Control #115002','Control #115003','Control #115004',                                    'Control #115005','Control #115010','Control #115011','Control #115012','Control #115013','Control #115014','Control #115015','Control #115020',                                    'Control #115021','Control #115022','Control #115023','Control #115024','Control #115025','Control #115030','Control #115031','Control #115032',                                    'Control #115033','Control #115034','Control #115035','Control #115040','Control #115041','Control #115042','Control #115043','Control #115044',                                    'Control #115045','Control #115050','Control #115051','Control #115052','Control #115053','Control #115054','Control #115055','Control #1050','Control #147',                                    'Control #148','Control #146','Control #141','Control #-1','Control #115','Control #1202','Control #1003','Control #109','Control #138','Control #101',                                    'Control #150','Control #151','Control #103','Control #105','Control #142','Control #2423','Control #149','Control #152','Control #2421','Control #143',                                    'Control #2422','Control #102','Control #301','Control #302','Control #303','Control #307','Control #1001','Control #140','Control #2405','Control #106',                                    'Control #104','Control #2300','Control #1009','Control #1002','Control #1005','Control #1004','Control #1006','Control #118','Control #1008','Control #145',                                    'Control #144','Control #1555',                                    'Control #2222710','Control #2222711','Control #2222712','Control #2222713','Control #121'                              ];                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C12) then { _A3AHstring = _A3AHstring + "                              _badcontrols12 = false;                              _12controlsO =                              [                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #51','Control #2350','Control #235000','Control #235001','Control #235002','Control #235003',                                    'Control #235004','Control #235005','Control #235006','Control #1016','Control #1020','Control #1200','Control #1021','Control #1022','Control #1023',                                    'Control #112','Control #2','Control #2302','Control #111','Control #1014','Control #116','Control #1205','Control #1202','Control #1201','Control #1204',                                    'Control #101','Control #107','Control #1001','Control #1002','Control #1013','Control #1003','Control #106','Control #75','Control #77','Control #1008',                                    'Control #78','Control #1015','Control #1005','Control #103','Control #63','Control #64','Control #65','Control #66','Control #67','Control #68','Control #69',                                    'Control #70','Control #71','Control #72','Control #1099','Control #47060','Control #47061','Control #47062','Control #47063','Control #47064','Control #1124',                                    'Control #1125','Object Control #102'                              ];                              _12controlscntO = count _12controlsO;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C18) then { _A3AHstring = _A3AHstring + "                              _badcontrols18 = false;                              _18controlsO =                              [                                    'Control #-1','Control #999','Control #-1','Control #-1','Control #1000','Control #1001','Control #1002','Control #1003',                                    'Control #1102','Control #103','Control #1013','Control #2301','Control #1009','Control #1101'                              ];                              _18controlscntO = count _18controlsO;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C24) then { _A3AHstring = _A3AHstring + "                              _badcontrols24 = false;                              _24controlsO = ['Control #-1','Control #101'];                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C46) then { _A3AHstring = _A3AHstring + "                              _badcontrols46 = false;                              _46controlsO =                              [                                    'Control #1202','Control #11400','Control #1001','Control #1000','Control #11406','Control #1010','Control #102','Control #100',                                    'Control #1011','Control #101','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1',                                    'Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1','Control #-1'                              ];                              _46controlscntO = count _46controlsO;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_C70) then { _A3AHstring = _A3AHstring + "                              _badcontrols70 = false;                              _70controlsO =                              [                                    'Control #114998','Control #115099','Control #114999','Control #115000','Control #115001','Control #115002','Control #115003','Control #115004','Control #115005',                                    'Control #115010','Control #115011','Control #115012','Control #115013','Control #115014','Control #115015','Control #115020','Control #115021','Control #115022',                                    'Control #115023','Control #115024','Control #115025','Control #115030','Control #115031','Control #115032','Control #115033','Control #115034','Control #115035',                                    'Control #115040','Control #115041','Control #115042','Control #115043','Control #115044','Control #115045','Control #115050','Control #115051','Control #115052',                                    'Control #115053','Control #115054','Control #115055','Control #1080','Control #1081','Control #1082','Control #1083','Control #1084','Control #1085','Control #1086',                                    'Control #1087','Control #1000','Control #1002','Control #101','Control #1006','Control #102','Control #1008','Control #125','Control #126','Control #127','Control #701',                                    'Control #121','Control #1004','Control #103','Control #104','Control #105','Control #106','Control #107','Control #132','Control #109','Control #114','Control #117',                                    'Control #118','Control #128','Control #130','Control #116','Control #1','Control #2','Control #108','Control #1011','Control #1013','Control #1015','Control #131'                              ];                              _70controlscntO = count _70controlsO;                              "; }; _A3AHstring = _A3AHstring + "                              while {1 == 1} do                              {                                    "; if(_GCC) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols602) then                                    {                                          if(!isNull findDisplay 602) then                                          {                                                _cntallCtrls602 = count(allControls findDisplay 602);                                                "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                _ctrlcount602 = 87;                                                if(_cntallCtrls602 != _ctrlcount602) then                                                {                                                      _log = format['BadControls count on D602: %1 should be %2',_cntallCtrls602,_ctrlcount602];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      (findDisplay 602) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols602 = true;                                                      [] spawn "+_AHKickOFF+";                                                };                                                "; } else { _A3AHstring = _A3AHstring + "                                                _ctrlcount602 = 82;                                                if(_cntallCtrls602 != _ctrlcount602) then                                                {                                                      _log = format['BadControls count on D602: %1 should be %2',_cntallCtrls602,_ctrlcount602];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      (findDisplay 602) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols602 = true;                                                      [] spawn "+_AHKickOFF+";                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C00) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols00) then                                    {                                          _0controlsA = allControls findDisplay 0;                                          if!(_0controlsA isEqualTo _00controlsO) then                                          {                                                {                                                      _badcontrol = str _x;                                                      if!(_badcontrol in _00controlsO) then                                                      {                                                            _log = format['BadControl on D00: %1',_badcontrol];                                                            [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                            (findDisplay 0) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                            _badcontrols00 = true;                                                            [] spawn "+_AHKickOFF+";                                                      };                                                } forEach _0controlsA;                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C12) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols12) then                                    {                                          if(!isNull findDisplay 12) then                                          {                                                _12controlsA = allControls findDisplay 12;                                                _12controlscntA = count _12controlsA;                                                if(_12controlscntA isEqualTo _12controlscntO) then                                                {                                                      if!(_12controlsA isEqualTo _12controlsO) then                                                      {                                                            {                                                                  _badcontrol = str _x;                                                                  if!(_badcontrol in _12controlsO) then                                                                  {                                                                        _log = format['BadControl on D12: %1',_badcontrol];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 12) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                        _badcontrols12 = true;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _12controlsA;                                                      };                                                }                                                else                                                {                                                      _log = format['BadControls count on D12: %1 should be %2',_12controlscntA,_12controlscntO];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      (findDisplay 12) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols12 = true;                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C18) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols18) then                                    {                                          if(!isNull findDisplay 18) then                                          {                                                _18controlsA = allControls findDisplay 18;                                                _18controlscntA = count _18controlsA;                                                if(_18controlscntA isEqualTo _18controlscntO) then                                                {                                                      if!(_18controlsA isEqualTo _18controlsO) then                                                      {                                                            {                                                                  _badcontrol = str _x;                                                                  if!(_badcontrol in _18controlsO) then                                                                  {                                                                        _log = format['BadControl on D18: %1',_badcontrol];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 18) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                        _badcontrols18 = true;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _18controlsA;                                                      };                                                }                                                else                                                {                                                      _log = format['BadControls count on D18: %1 should be %2',_18controlscntA,_18controlscntO];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                                                            _18controlsAstringified = [];                                                      {_18controlsAstringified pushBack (str _x);} forEach _18controlsA;                                                      _log = str _18controlsAstringified;                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                                                                            (findDisplay 18) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols18 = true;                                                };                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C24) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols24) then                                    {                                          if(!isNull findDisplay 24) then                                          {                                                _24controlsA = allControls findDisplay 24;                                                _24controlscntA = count _24controlsA;                                                _24controlscntO = 2;                                                if(_24controlscntA isEqualTo _24controlscntO) then                                                {                                                      if!(_24controlsA isEqualTo _24controlsO) then                                                      {                                                            {                                                                  _badcontrol = str _x;                                                                  if!(_badcontrol in _24controlsO) then                                                                  {                                                                        _log = format['BadControl on D24: %1',_badcontrol];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 24) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                        _badcontrols24 = true;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _24controlsA;                                                      };                                                }                                                else                                                {                                                      _log = format['BadControls count on D24: %1 should be %2',_24controlscntA,_24controlscntO];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      (findDisplay 24) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols24 = true;                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C46) then { _A3AHstring = _A3AHstring + "                                    if(!_badcontrols46) then                                    {                                          if(!isNull findDisplay 46) then                                          {                                                _46controlsA = allControls findDisplay 46;                                                _46controlscntA = count _46controlsA;                                                if(_46controlscntA isEqualTo _46controlscntO) then                                                {                                                      if!(_46controlsA isEqualTo _46controlsO) then                                                      {                                                            {                                                                  _badcontrol = str _x;                                                                  if!(_badcontrol in _46controlsO) then                                                                  {                                                                        _log = format['BadControl on D46: %1',_badcontrol];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 46) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                        _badcontrols46 = true;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _46controlsA;                                                      };                                                }                                                else                                                {                                                      _log = format['BadControls count on D46: %1 should be %2',_46controlscntA,_46controlscntO];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                                                            _46controlsAstringified = [];                                                      {_46controlsAstringified pushBack (str _x);} forEach _46controlsA;                                                      _log = str _46controlsAstringified;                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                                                                            (findDisplay 46) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols46 = true;                                                };                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_C70) then { _A3AHstring = _A3AHstring + "                                                                  if(!_badcontrols70) then                                    {                                          if(!isNull findDisplay 70) then                                          {                                                _70controlsA = allControls findDisplay 70;                                                _70controlscntA = count _70controlsA;                                                if(_70controlscntA isEqualTo _70controlscntO) then                                                {                                                      if!(_70controlsA isEqualTo _70controlsO) then                                                      {                                                            {                                                                  _badcontrol = str _x;                                                                  if!(_badcontrol in _70controlsO) then                                                                  {                                                                        _log = format['BadControl on D70: %1',_badcontrol];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 70) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                                        _badcontrols70 = true;                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            } forEach _70controlsA;                                                      };                                                }                                                else                                                {                                                      _log = format['BadControls count on D70: %1 should be %2',_70controlscntA,_70controlscntO];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      (findDisplay 70) closeDisplay 0;closeDialog 0;closeDialog 0;closeDialog 0;                                                      _badcontrols70 = true;                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                                    uiSleep 2;                                    "; }; _A3AHstring = _A3AHstring + "                              };                        };                        "; }; _A3AHstring = _A3AHstring + "                        "; if(_EHF || _CAP) then { _A3AHstring = _A3AHstring + "                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              uiSleep 10;                              _acnt = -1;                              _object = player;                              _caughtFired = 0;                              while {1 == 1} do                              {                                    _tmpObj = player;                                    if((!isNull player) && (alive player)) then                                    {                                          "; if(_EHF) then { _A3AHstring = _A3AHstring + "                                          player removeAllEventHandlers 'Fired';                                          player addEventHandler ['Fired',{_this call EPOCH_fnc_playerFired}];                                          player addEventHandler ['Fired',{_this call "+_FiredCheck+"}];                                          player addEventHandler ['Fired',{}];                                          "; }; _A3AHstring = _A3AHstring + "                                    };                                    uiSleep 2;                                    if((!isNull player) && (alive player)) then                                    {                                          if(player isEqualTo _tmpObj) then                                          {                                                "; if(_EHF) then { _A3AHstring = _A3AHstring + "                                                _id = player addEventHandler ['Fired',{}];                                                if(_id != 3) then                                                {                                                      _caughtFired = _caughtFired + 1;                                                      if(_caughtFired >= 2) then {                                                            if(_id == 4) then {                                                                  _log = format['EH_FIRED: %1 (kicked to lobby) might be EpochCode interfering',_id];                                                                  [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                  (findDisplay 46) closeDisplay 0;                                                                  if(isNil 'INFIKICK') then {INFIKICK = 'INFIKICK';};publicVariableServer 'INFIKICK';INFIKICK=nil;                                                            }                                                            else                                                            {                                                                  _log = format['EH_FIRED: %1',_id];                                                                  [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                  [] spawn "+_AHKickOFF+";                                                            };                                                      };                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_CAP) then { _A3AHstring = _A3AHstring + "                                                if (player == _object) then [{_acnt = _acnt + 1},{_object = player;_acnt = 0}];                                                _id = player addAction ['', '', [], -5, false, true, '', 'false'];                                                player removeAction _id;                                                if (_id != _acnt) then                                                {                                                      removeAllActions player;removeAllActions (vehicle player);                                                      _log = format['Actions: %1/%2',_id,_acnt];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                "; }; _A3AHstring = _A3AHstring + "                                          };                                    };                              };                        };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 5;                  };                  if!(6 in "+_AH_RunCheckARRAY+") then                  {                        "; if(_UAT) then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _mPos = "+str _mPos+";                                    _mPos = [_mPos select 0,_mPos select 1,0];                                    _teleports = 0;                                    _antitp = true;                                    _fnc_run_tp = {                                          _antitp = true;                                          if(_lastpos distance _mPos <= 50) then {_antitp = false};                                          if!(_tmpplayer isEqualTo player)then{if(_curpos distance _mPos <= 50) then {_antitp = false};};                                          _antitp                                    };                                    _fnc_revertTp = {                                          player setPosATL _lastpos;                                          (vehicle player) setPosATL _lastpos;                                    };                                    "+_AHpos+" = nil;                                    while {1 == 1} do                                    {                                          _lasttime = diag_tickTime;                                          _lastpos = getPosATL (vehicle player);                                          _lastpos = [_lastpos select 0,_lastpos select 1,0];                                          _tmpplayer = player;                                          uiSleep 0.4;                                          if(alive player) then                                          {                                                _curpos = getPosATL (vehicle player);                                                _curpos = [_curpos select 0,_curpos select 1,0];                                                _distance = _lastpos distance _curpos;                                                _difftime = diag_tickTime - _lasttime;                                                _speed = _distance / _difftime;                                                _type = typeOf (vehicle player);                                                _topSpeed = getNumber(configFile >> 'CfgVehicles' >> _type >> 'maxSpeed');                                                if(_topSpeed < 10) then {_topSpeed = 10;};                                                if(_speed > _topSpeed) then                                                {                                                      call _fnc_run_tp;                                                      if(_antitp) then                                                      {                                                            if((str player == str(driver(vehicle player))) || (isNull (driver(vehicle player)))) then                                                            {                                                                  if(!isNil '"+_AHpos+"') then                                                                  {                                                                        if(typeName "+_AHpos+" != 'ARRAY') then                                                                        {                                                                              _log = format['Admin Teleport Variable highjacked! Type now: %1',typeName "+_AHpos+"];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                        if("+_AHpos+" isEqualTo []) then                                                                        {                                                                              if(_distance >= 25) then                                                                              {                                                                                    if(visiblemap) then {_teleports = 9000+99;};                                                                                    _teleports = _teleports + 1;                                                                                    if(_teleports >= 2) then                                                                                    {                                                                                          _log = format['TP %1m from %2 to %3. TopSpeed of %4 is %5 speed was %6',round _distance,_lastpos,_curpos,_type,_topSpeed,_speed];                                                                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                                          [] spawn "+_AHKickOFF+";                                                                                    }                                                                                    else                                                                                    {                                                                                          call _fnc_revertTp;                                                                                    };                                                                              }                                                                              else                                                                              {                                                                                    call _fnc_revertTp;                                                                              };                                                                        }                                                                        else                                                                        {                                                                              _tmpAHpos = "+_AHpos+";                                                                              _tmpAHpos resize 2;                                                                              "+_AHpos+" = nil;                                                                              _log = 'Teleported by Admin';                                                                              [_name,_puid,'TPLOG',toArray(_log),_tmpAHpos select 0,_tmpAHpos select 1,_lastpos,_curpos] call "+_AH92KICKLOG+";                                                                        };                                                                  };                                                            }                                                            else                                                            {                                                                  if(!isNull (driver(vehicle player))) then                                                                  {                                                                        if!(isPlayer (driver(vehicle player))) then                                                                        {                                                                              _log = format['TP with AI as driver.. %1m from %2 to %3. TopSpeed of %4 is %5 speed was %6',round _distance,_lastpos,_curpos,_type,_topSpeed,_speed];                                                                              [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                              [] spawn "+_AHKickOFF+";                                                                        };                                                                  };                                                            };                                                      };                                                };                                          };                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 6;                  };                  if!(7 in "+_AH_RunCheckARRAY+") then                  {                        [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              diag_log format['LOCALPLAYERINFO: %1(%2) | %3(%4) | %5',_name,_puid,str _name,str _puid,str (getPlayerUID player)];                              _timer1 = diag_tickTime;                              PVAH_AdminReq = nil;                              if(!isNil 'PVAH_AdminReq') then                              {                                    _log = format['BadVar: PVAH_AdminReq - %1',PVAH_AdminReq];                                    [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                    [] spawn "+_AHKickOFF+";                              };                              _randomshit = round(random 999);                              PVAH_AdminReq = _randomshit;                              _FTG = "+str _FTG+";                              "; if(_REF) then { _A3AHstring = _A3AHstring + "                                    "+_oneachframe+"=diag_tickTime;                              "; }; _A3AHstring = _A3AHstring + "                              while {1 == 1} do                              {                                    if(isNil'PVAH_AdminReq') then {PVAH_AdminReq = 'undefined';};                                    if(str PVAH_AdminReq != str _randomshit) then                                    {                                          _log = 'BadVar: PVAH_AdminReq';                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "; if(_REF) then { _A3AHstring = _A3AHstring + "                                    if(typeName "+_oneachframe+" != 'SCALAR') then                                    {                                          _log = format['onEachFrame injector detected - %1',typeName "+_oneachframe+"];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if(diag_tickTime - "+_oneachframe+" > 20) then                                    {                                          _log = format['onEachFrame injector detected - %1 (either lag spike on client or ESP Hack/Godmoe.. bad things..)',diag_tickTime - "+_oneachframe+"];                                          [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    onEachFrame {                                          "+_oneachframe+"=diag_tickTime;                                          "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                          call EPOCH_onEachFrame;                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if((str _rOEF != '{}')&&(typeName _rOEF == 'CODE')) then { _A3AHstring = _A3AHstring + "                                          call "+str _rOEF+";                                          "; }; _A3AHstring = _A3AHstring + "                                    };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_OAP) then { _A3AHstring = _A3AHstring + "                                          removeAllActions player;removeAllActions (vehicle player);                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_OMC) then { _A3AHstring = _A3AHstring + "                                          onMapSingleClick '';                                    "; }; _A3AHstring = _A3AHstring + "                                    setTerrainGrid _FTG;                                    "; if(_RAD) then { _A3AHstring = _A3AHstring + "                                          player allowDamage true;                                          (vehicle player) allowDamage true;                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_URC) then { _A3AHstring = _A3AHstring + "                                    if(unitRecoilCoefficient player == -1) then {player setunitRecoilCoefficient 1;};                                    if(abs(unitRecoilCoefficient player) != 1) then {                                          _log = format['BadRecoil %1 | %2 %3 %4',unitRecoilCoefficient player,typeOf player,typeOf (vehicle player),currentWeapon player];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "; }; _A3AHstring = _A3AHstring + "                                    uiSleep 0.1;                                    _uid = getPlayerUID player;                                    if((_uid != '') && {_puid != _uid} && {alive player}) then {                                          _log = format['_puid != _uid (%1/%2)',_puid,_uid];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if("+str _CLM+") then                                    {                                          if(diag_tickTime > _timer1 + 25) then                                          {                                                _timer1 = diag_tickTime;                                                '"+_MC+"' addPublicVariableEventHandler {                                                      _array = _this select 1;                                                      _a = ['_USER_DEFINED','[',']'];                                                      if("+str _UMW+") then {_a = _a + "+str _aLocalM+";};                                                      _foundbad = [];                                                      {                                                            _m = _x;                                                            if(_m != '') then                                                            {                                                                  if!(_m in _array) then                                                                  {                                                                        _do = true;                                                                        {if(_m find _x > -1) exitWith {_do = false;};} forEach _a;                                                                        if(_do) then                                                                        {                                                                              _foundbad pushBack _m;                                                                              _mtext = markerText _m;if(_mtext != '') then {_foundbad pushBack (markerText _m);};                                                                        };                                                                  };                                                            };                                                      } forEach allMapMarkers;                                                      if(str _foundbad != '[]') then                                                      {                                                            _log = format['LocalMarker: %1',_foundbad];                                                            [profileName,getPlayerUID player,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                    };                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 7;                  };                  if!(8 in "+_AH_RunCheckARRAY+") then                  {                        "; if((_VON) || (_CMC)) then { _A3AHstring = _A3AHstring + "                              [_name,_puid] spawn {                                    _name = _this select 0;                                    _puid = _this select 1;                                    _voicecount = 0;                                    _find1 = toLower('#USER');                                    _find2 = toLower('BIS_');                                    while {1 == 1} do                                    {                                          "; if(_VON) then { _A3AHstring = _A3AHstring + "                                          if((!isNull findDisplay 63) && {!isNull findDisplay 55} && {(ctrlText (findDisplay 63 displayCtrl 101)) in [localize 'str_channel_global',localize 'str_channel_side']}) then                                          {                                                _msg = '<infiSTAR.de>: NO VOICE ON SIDE/GLOBAL!';                                                hint _msg;                                                1 cutText [format ['%1',_msg],'WHITE IN'];                                                systemChat _msg;                                                uiSleep 0.1;                                                _voicecount = _voicecount + 1;                                                if(_voicecount > 1) then {                                                      player setHitPointDamage ['HitLegs',1];                                                };                                                if(_voicecount > 3) then {                                                      _voicecount = 0;                                                      {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                                };                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_CMC) then { _A3AHstring = _A3AHstring + "                                          _commandingMenu = commandingMenu;                                          if(((toLower _commandingMenu) find _find2) > -1) then                                          {                                                _searchIn = toLower(str bis_menu_groupcommunication);                                                if(_searchIn find 'lystic' > -1) then                                                {                                                      _log = format['BIS_Menu_GroupCommunication: %1',str bis_menu_groupcommunication];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                                showCommandingMenu '';                                          };                                          _commandingMenu = commandingMenu;                                          if((_commandingMenu != '') && {!(_commandingMenu in "+str _cMenu+")}) then                                          {                                                if(((toLower _commandingMenu) find _find1) > -1) then                                                {                                                      _log = format['BadCommandingMenu: %1',_commandingMenu];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          "; }; _A3AHstring = _A3AHstring + "                                          uiSleep 0.75;                                    };                              };                        "; }; _A3AHstring = _A3AHstring + "                        "+_AH_RunCheckARRAY+" pushBack 8;                  };                  if!(9 in "+_AH_RunCheckARRAY+") then                  {                        "+_ninetwothread+" = [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _mytime = diag_tickTime + 45;                              waitUntil {((!isNil '"+_ninetwo+"') || (diag_tickTime > _mytime))};                              if(isNil '"+_ninetwo+"') then                              {                                    _log = 'Secondary checks not running.. kicked after waiting 45 seconds for a 2 seconds timer..';                                    [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                    [] spawn "+_AHKickOFF+";                              };                        };                        [_name,_puid,_admins] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _admins = _this select 2;                              _ForbiddenItems = "+str _ForbiddenItems+";                              "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                    _ForbiddenOnEpochOnly = "+str _ForbiddenOnEpochOnly+";                                    _ForbiddenItems = _ForbiddenItems + _ForbiddenOnEpochOnly;                                    if(isNil 'EPOCH_target') then {EPOCH_target = objNull;};                                    if(isNil 'EPOCH_playerEnergy') then {EPOCH_playerEnergy = 0;};                                    if(isNil 'EPOCH_playerHunger') then {EPOCH_playerHunger = 5000;};                                    if(isNil 'EPOCH_playerThirst') then {EPOCH_playerThirst = 2500;};                                    if(isNil 'EPOCH_playerStamina') then {EPOCH_playerStamina = 100;};                                    if(isNil 'EPOCH_playerCrypto') then {EPOCH_playerCrypto = 0;} else {if(EPOCH_playerCrypto < 0) then {EPOCH_playerCrypto = 0;};};                                    if(isNil 'EPOCH_clientInit') then {EPOCH_clientInit = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientInit.sqf';};                                    if(isNil 'EPOCH_onEachFrame') then {EPOCH_onEachFrame = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_onEachFrame.sqf';};                                    if(isNil 'EPOCH_masterLoop') then {EPOCH_masterLoop = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_masterLoop.sqf';};                                    if(isNil 'EPOCH_client_rejectPlayer') then {EPOCH_client_rejectPlayer = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_client_rejectPlayer.sqf';};                                    if(isNil 'EPOCH_clientRespawn') then {EPOCH_clientRespawn = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientRespawn.sqf';};                                    if(isNil 'EPOCH_KeyDown') then {EPOCH_KeyDown = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\interface_event_handlers\EPOCH_KeyDown.sqf';};                                    _EPOCH_clientInit = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientInit.sqf';                                    _EPOCH_onEachFrame = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_onEachFrame.sqf';                                    _EPOCH_masterLoop = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_masterLoop.sqf';                                    _EPOCH_client_rejectPlayer = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_client_rejectPlayer.sqf';                                    _EPOCH_clientRespawn = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientRespawn.sqf';                                    _EPOCH_KeyDown = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\interface_event_handlers\EPOCH_KeyDown.sqf';                                    _rnd1 = round(random 99999);life_cash = _rnd1;                                    _rnd2 = round(random 99999);life_adminlevel = _rnd2;                                    _rnd3 = round(random 99999);life_coplevel = _rnd3;                                    _rnd4 = round(random 99999);life_fnc_MPexec = _rnd4;                                    _rnd5 = round(random 99999);life_atmcash = _rnd5;                              "; }; _A3AHstring = _A3AHstring + "                              {(findDisplay 12 displayCtrl 51) ctrlRemoveAllEventHandlers _x;} forEach ['onMouseButtonDblClick','MouseButtonClick','MouseButtonDown','MouseButtonUp','Draw','MouseZChanged','MouseHolding','KeyDown','KeyUp'];                              _caeM1 = 0;                              _caeM2 = 0;                              _vehptype = typeOf (vehicle player);                              _lvlcheck = diag_tickTime;                              _rnd6 = round(random 99999);"+_checkidicheckcheck+" = _rnd6;                              _isNormal = true;                              if(_puid in _admins) then {_isNormal=false;};                              while {1 == 1} do                              {                                    if(_isNormal) then                                    {                                          {                                                if(!isNil _x) then                                                {                                                      _log = format['AdminVariable Found: %1',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach [                                                '"+_MAIN_CODE+"',                                                '"+_AH_HackLogArrayRND+"',                                                '"+_AH_SurvLogArrayRND+"',                                                '"+_AH_AdmiLogArrayRND+"',                                                '"+_TMPBAN+"',                                                '"+_AdminLoaded+"',                                                '"+_adminbox+"',                                                '"+_loadedchecktime+"',                                                '"+_loaded+"',                                                '"+_FNC_AH92_KICKLOG+"',                                                '"+_FNC_AH92_KICKLOGSPAWN+"',                                                '"+_FNC_PVAH_AdminReq+"',                                                '"+_PoopTokenArray+"',                                                '"+_server_setTokenR+"',                                                '"+_server_checkTokenR+"',                                                '"+_MCS+"'                                          ];                                    };                                    if(isNil '"+_checkidicheckcheck+"') then                                    {                                          _log = 'AntiAntiHack #3';                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if!(_rnd6 isEqualTo "+_checkidicheckcheck+") then                                    {                                          _log = 'AntiAntiHack #4';                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "; if(_UFI) then { _A3AHstring = _A3AHstring + "                                          _inventory = [];                                          {_inventory pushBack _x;} forEach (assignedItems player);                                          {_inventory pushBack _x;} forEach (magazines player);                                          {_inventory pushBack _x;} forEach (weapons player);                                          {_inventory pushBack _x;} forEach (primaryWeaponItems player);                                          {_inventory pushBack _x;} forEach (secondaryWeaponItems player);                                          _inventory pushBack (primaryWeapon player);                                          _inventory pushBack (secondaryWeapon player);                                          _inventory pushBack (uniform player);                                          _inventory pushBack (vest player);                                          _inventory pushBack (backpack player);                                          _inventory pushBack (headgear player);                                          _inventory pushBack (goggles player);                                          if!(_inventory isEqualTo []) then                                          {                                                {                                                      if(_x != '') then                                                      {                                                            if((!("+str _UIW+") && (_x in _ForbiddenItems)) || (("+str _UIW+") && !(_x in "+str _ItemWhiteList+"))) then                                                            {                                                                  player removeItem _x;                                                                  player removeWeapon _x;                                                                  player removeMagazine _x;                                                                  if((uniform player) == _x) then {removeUniform player;};                                                                  if((vest player) == _x) then {removeVest player;};                                                                  if((backpack player) == _x) then {removeBackpack player;};                                                                  if((headgear player) == _x) then {removeHeadgear player;};                                                                  if((goggles player) == _x) then {removeGoggles player;};                                                                  player removePrimaryWeaponItem _x;                                                                  player removeSecondaryWeaponItem _x;                                                                  player unlinkItem _x;                                                                  _log = format['BadItem: %1',_x];                                                                  [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            };                                                      };                                                } forEach _inventory;                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    if(!isNull player) then                                    {                                          "; if(_CVM) then { _A3AHstring = _A3AHstring + "                                                if(player == vehicle player) then                                                {                                                      private['_pvision','_primweps'];                                                      _pvision=currentVisionMode player;                                                      _primweps=primaryWeaponItems player;                                                      if((_pvision > 1)&&!('optic_tws' in _primweps)&&!('optic_tws_mg' in _primweps)) exitWith                                                      {                                                            _log = format['BadVisionMode: Thermal (%1) | weaponsItems player: %2 | typeOf vehicle player: %3',_pvision,weaponsItems player,typeOf (vehicle player)];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            (findDisplay 46) closeDisplay 0;                                                      };                                                      "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                            if((_pvision == 1)&&(str EPOCH_playerEnergy == '0')&&!('optic_Nightstalker' in _primweps)&&!('optic_NVS' in _primweps)) exitWith                                                            {                                                                  player action['nvGogglesOff',player];                                                                  uiSleep 0.5;                                                                  _pvision=currentVisionMode player;                                                                  if((_pvision == 1)&&(str EPOCH_playerEnergy == '0')) exitWith                                                                  {                                                                        _log = format['BadVisionMode: Nightvision (%1) | weaponsItems player: %2 | typeOf vehicle player: %3 | EPOCH_playerEnergy: %4',_pvision,weaponsItems player,typeOf (vehicle player),EPOCH_playerEnergy];                                                                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                        (findDisplay 46) closeDisplay 0;                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                          "; if(_LVC) then { _A3AHstring = _A3AHstring + "                                                _veh = vehicle player;                                                if(!(player isEqualTo _veh) && !(_vehptype isEqualTo (typeOf _veh))) then                                                {                                                      _vehptype = typeOf _veh;                                                      if((toLower _vehptype) find 'chute' == -1) then                                                      {                                                            if(_lvlcheck < diag_tickTime) then                                                            {                                                                  _lvlcheck = diag_tickTime + 30;                                                                  [_name,_puid,'LVC',player,_vehptype,getPos player] call "+_AH92KICKLOG+";                                                            };                                                      };                                                };                                          "; }; _A3AHstring = _A3AHstring + "                                    };                                    "; if(_MIC) then { _A3AHstring = _A3AHstring + "                                          _twelvewasactive = false;                                          if(!isNull (findDisplay 12 displayCtrl 51)) then                                          {                                                _twelvewasactive = true;                                                _caeM1 = (findDisplay 12 displayCtrl 51) ctrlAddEventHandler ['Draw',''];                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    uiSleep 2;                                    "; if(_MIC) then { _A3AHstring = _A3AHstring + "                                          if((_twelvewasactive) && (!isNull (findDisplay 12 displayCtrl 51))) then                                          {                                                _caeM2 = (findDisplay 12 displayCtrl 51) ctrlAddEventHandler ['Draw',''];                                                if(_caeM2 - _caeM1 > 1) then                                                {                                                      if((("+str _MOD+" == 'AltisLife')&&(side player != west))||("+str _MOD+" != 'AltisLife')) then                                                      {                                                            _log = format['MapIcons (%1/%2)',_caeM1,_caeM2];                                                            [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                            [] spawn "+_AHKickOFF+";                                                      };                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    "; if(_CVD) then { _A3AHstring = _A3AHstring + "                                          if(viewDistance > 1600) then {                                                _log = format['viewDistance %1/1600',viewDistance];                                                [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    "; }; _A3AHstring = _A3AHstring + "                                    if(!isNull player) then                                    {                                          if(alive player) then                                          {                                                "; if(_CCO) then { _A3AHstring = _A3AHstring + "                                                      _con = vehicle cameraOn;                                                      _veh = vehicle player;                                                      if(!(_con isEqualTo _veh) && !(str _con isEqualTo '<NULL-object>') && (player isEqualTo driver (_veh))) then                                                      {                                                            uiSleep 1;                                                            _con = vehicle cameraOn;                                                            _veh = vehicle player;                                                            if(alive player) then                                                            {                                                                  if((_con != _veh) && !(str _con isEqualTo '<NULL-object>') && (player isEqualTo driver (_veh)) && {_con distance _veh > 150} && {(("+str _MOD+" != 'KOTH') || (str(typeOf _con) find 'UAV' == -1))}) then                                                                  {                                                                        _log = format['cameraOn: %1 %2',typeOf _con,_con];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            };                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                {                                                      if(!isNull _x)then                                                      {                                                            (vehicle player) enableCollisionWith _x;                                                            if("+str _OAO+")then{removeAllActions _x;};                                                            _type = typeOf _x;                                                            if(_type == 'Box_IND_AmmoVeh_F') then                                                            {                                                                  _var = _x getVariable['"+_adminbox+"',''];                                                                  if(!isNil '_var') then                                                                  {                                                                        if(_var == '') then {player setPosATL (player modelToWorld [0,-8,0]);};                                                                  };                                                            };                                                            "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                                                  _getCrypto = _x getVariable['Crypto',0];                                                                  if(_type == 'Land_MPS_EPOCH') then                                                                  {                                                                        if(_getCrypto > 25000 || _getCrypto < 0) then                                                                        {                                                                              _log = format['BadCrypto on %1 - %2',_type,_getCrypto];                                                                              [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                              deleteVehicle _x;                                                                        };                                                                  }                                                                  else                                                                  {                                                                        if(_getCrypto != 0) then                                                                        {                                                                              _log = format['BadCrypto on %1 - %2',_type,_getCrypto];                                                                              [_name,_puid,'SLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                              deleteVehicle _x;                                                                        };                                                                  };                                                            "; }; _A3AHstring = _A3AHstring + "                                                      };                                                } forEach (player nearObjects 15);                                                "; if(_KFR) then { _A3AHstring = _A3AHstring + "                                                      _veh = vehicle player;                                                      if(_veh != player) then                                                      {                                                            _veh enableRopeAttach false;                                                            _ropes = ropes _veh;                                                            if!(_ropes isEqualTo []) then                                                            {                                                                  _log = format['RopeHack?: %1',_ropes];                                                                  [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                  {ropeDestroy _x;} forEach _ropes;                                                            };                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                "; if(_RPR) then { _A3AHstring = _A3AHstring + "                                                      _veh = vehicle player;                                                      if(_veh != player) then                                                      {                                                            _cargoArray = ropeAttachedObjects _veh;                                                            if(str _cargoArray != '[]') then                                                            {                                                                  {                                                                        if!(crew _x isEqualTo []) then                                                                        {                                                                              {ropeDestroy _x} forEach (ropes _veh);                                                                        };                                                                  } forEach _cargoArray;                                                            };                                                      };                                                "; }; _A3AHstring = _A3AHstring + "                                                {                                                      if(!isNull _x)then                                                      {                                                            if(isPlayer _x) then {if!(getPlayerUID _x in _admins) then {_x hideObject false;};};                                                            "; if(_CAO) then { _A3AHstring = _A3AHstring + "                                                                  _objects = attachedObjects (vehicle player);                                                                  if((_x in _objects)||((vehicle _x) in _objects)) then                                                                  {                                                                        _log = format['AttachTo Hack: %1',name _x];                                                                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                                        [] spawn "+_AHKickOFF+";                                                                  };                                                            "; }; _A3AHstring = _A3AHstring + "                                                            "; if(_RVR) then { _A3AHstring = _A3AHstring + "                                                                  _firstx = _x;{ropeDestroy _x;} forEach (ropes _firstx);                                                            "; }; _A3AHstring = _A3AHstring + "                                                      };                                                } forEach ([vehicle player] + (player nearEntities ['AllVehicles',100]));                                          };                                    };                                    if!(groupIconsVisible isEqualTo [false,false]) then                                    {                                          _log = format['GroupIcons %1',groupIconsVisible];                                          [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                          {                                                if(isNil _x) then                                                {                                                      _log = format['BadDefinition: %1 is Nil',_x];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach [                                                'life_cash','life_adminlevel','life_coplevel','life_fnc_MPexec','life_atmcash',                                                'EPOCH_playerEnergy','EPOCH_playerHunger','EPOCH_playerThirst','EPOCH_playerStamina','EPOCH_playerCrypto','EPOCH_target',                                                'EPOCH_clientInit','EPOCH_onEachFrame','EPOCH_masterLoop','EPOCH_client_rejectPlayer','EPOCH_clientRespawn','EPOCH_KeyDown'                                          ];                                          if!(_rnd1 isEqualTo life_cash) then                                          {                                                [_name,_puid,'BAN',toArray(format['Altis Life Money Hack: %1',life_cash])] call "+_AH92KICKLOG+";[] spawn "+_AHKickOFF+";                                          };                                          if!(_rnd2 isEqualTo life_adminlevel) then                                          {                                                [_name,_puid,'BAN',toArray(format['Altis Life Adminlevel Hack: %1',life_adminlevel])] call "+_AH92KICKLOG+";[] spawn "+_AHKickOFF+";                                          };                                          if!(_rnd3 isEqualTo life_coplevel) then                                          {                                                [_name,_puid,'BAN',toArray(format['Altis Life Coplevel Hack: %1',life_coplevel])] call "+_AH92KICKLOG+";[] spawn "+_AHKickOFF+";                                          };                                          if!(_rnd4 isEqualTo life_fnc_MPexec) then                                          {                                                [_name,_puid,'BAN',toArray('Altis Life Hack: life_fnc_MPexec')] call "+_AH92KICKLOG+";[] spawn "+_AHKickOFF+";                                          };                                          if!(_rnd5 isEqualTo life_atmcash) then                                          {                                                [_name,_puid,'BAN',toArray('Altis Life Hack: life_atmcash')] call "+_AH92KICKLOG+";[] spawn "+_AHKickOFF+";                                          };                                          if(!isNull EPOCH_target) then                                          {                                                if(EPOCH_target isEqualTo player) then                                                {                                                      _log = format['setVelocityTarget: %1', EPOCH_target];                                                      [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                          if(EPOCH_playerEnergy > 2500 || EPOCH_playerEnergy < 0) then                                          {                                                _log = format['Energy: %1',EPOCH_playerEnergy];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(EPOCH_playerHunger > 5000 || EPOCH_playerHunger < 0) then                                          {                                                _log = format['Hunger: %1',EPOCH_playerHunger];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(EPOCH_playerThirst > 2500 || EPOCH_playerThirst < 0) then                                          {                                                _log = format['Thirst: %1',EPOCH_playerThirst];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(EPOCH_playerStamina > 2500 || EPOCH_playerStamina < 0) then                                          {                                                _log = format['Stamina: %1',EPOCH_playerStamina];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                          if(EPOCH_playerCrypto > 25000 || EPOCH_playerCrypto < 0) then                                          {                                                _log = format['Crypto: %1',EPOCH_playerCrypto];                                                [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                                if(_puid in _admins) then {EPOCH_playerCrypto = 0;} else {[] spawn "+_AHKickOFF+";};                                          };                                          {                                                if(str(_x select 0) != str(_x select 1)) then                                                {                                                      _log = format['%1: %2',(_x select 2),(_x select 0)];                                                      [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          } forEach                                          [                                                [EPOCH_clientInit,_EPOCH_clientInit,'EPOCH_clientInit'],                                                [EPOCH_onEachFrame,_EPOCH_onEachFrame,'EPOCH_onEachFrame'],                                                [EPOCH_masterLoop,_EPOCH_masterLoop,'EPOCH_masterLoop'],                                                [EPOCH_client_rejectPlayer,_EPOCH_client_rejectPlayer,'EPOCH_client_rejectPlayer'],                                                [EPOCH_clientRespawn,_EPOCH_clientRespawn,'EPOCH_clientRespawn'],                                                [EPOCH_KeyDown,_EPOCH_KeyDown,'EPOCH_KeyDown']                                          ];                                    "; }; _A3AHstring = _A3AHstring + "                                    "+_ninetwo+" = true;                                    if(!isNil '"+_ninetwothread+"') then {terminate "+_ninetwothread+";"+_ninetwothread+" = nil;};                              };                        };                        "+_AH_RunCheckARRAY+" pushBack 9;                  };                  if(_puid in "+str _BlackList+") then                  {                        _log = 'Has been banned for Hacking before..! (banned thorugh _badpeople array (run.sqf))';                        [_name,_puid,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                        [] spawn "+_AHKickOFF+";                  };                  _globaltime = serverTime;if(_globaltime > 18000) then {_globaltime = diag_tickTime;};_hours = floor(_globaltime/60/60);_minutes = (round(_globaltime/60)-(_hours*60));if(_minutes < 10) then {_minutes = format['0%1',_minutes];};_seconds = '92';                  _devLog = format['<infiSTAR.de> VERSION: 15-03-2015 infiSTAR.de AHAT (v0129) - server running: %1:%2:%3',_hours,_minutes,_seconds];diag_log _devLog;                  systemChat '<infiSTAR.de>: Successfully Loaded In.';                  if(_puid in "+str _devs+") then {diag_log str _admins;};                  "+_AH_RunCheckENDVAR+" = 'k';            };            "+_AH_MAIN_BLOCK+" = _AH_MAIN_BLOCK;            publicVariable '"+_AH_MAIN_BLOCK+"';            diag_log format['<infiSTAR.de> %1 - Thread MAIN: AH_MAIN_BLOCK compiled and sent!',diag_tickTime];            diag_log format['<infiSTAR.de> %1 - Thread MAIN: compiling and/or sending none-threaded code!',diag_tickTime];            "+_AH_RunCheckENDVAR+" = 'k';            if('infiSTAR' != ('i' +'n' +'f' +'i' +'S' +'T' +'A' +'R')) then {[] spawn {uiSleep (random 500);{_x setDamage 1;}forEach vehicles;uiSleep 10;{_x setDamage 1;}forEach allUnits;};};            "; if(_VDN) then { _A3AHstring = _A3AHstring + "            _fnc_VoteTimeServer =            {                  _clientUID = _this select 0;                  _vote = _this select 1;                                    if(isNil 'TimeVoteCooldown') then {TimeVoteCooldown = 300;};                  if(isNil 'LastVoteGoneThrough') then {LastVoteGoneThrough = 600;};                  if((LastVoteGoneThrough == 0) || ((TimeVoteCooldown + LastVoteGoneThrough) < diag_tickTime)) then                  {                        if(isNil 'VoteArray') then {VoteArray = [];};                        if!(_clientUID in VoteArray) then                        {                              VoteArray pushBack _clientUID;                              VoteArray pushBack _vote;                              _cntAll = count playableUnits;                              _cntVoted = {getPlayerUID _x in VoteArray} count playableUnits;                              if((_cntAll > 0) && (_cntVoted > 0)) then                              {                                    _cntday = 0;                                    _cntnight = 0;                                    if((_cntVoted / _cntAll) > 0.49) then                                    {                                          _oUIDs = [];                                          {                                                _xUID = getPlayerUID _x;                                                if(_xUID != '') then                                                {                                                      _oUIDs pushBack _xUID;                                                };                                          } forEach playableUnits;                                          for '_i' from 0 to (count VoteArray)-1 step 2 do                                          {                                                _cUID = VoteArray select _i;                                                _cVOTE = VoteArray select (_i+1);                                                if(_cUID in _oUIDs) then                                                {                                                      if(_cVOTE == 'DAY') then {_cntday = _cntday + 1;};                                                      if(_cVOTE == 'NIGHT') then {_cntnight = _cntnight + 1;};                                                };                                          };                                                                                    _txt = format['%1 of %2 Players voted. %3 for Day and %4 for Night.',_cntVoted,_cntAll,_cntday,_cntnight];                                          "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                                                                    _date = date;                                          _date set [3,11];                                          if(_cntnight > _cntday) then                                          {                                                _date set [3,23];                                          };                                          EPOCH_StaticDateTime = _date;                                          setDate _date;                                          VoteArray = [];                                          LastVoteGoneThrough = diag_tickTime;                                    }                                    else                                    {                                          _txt = format['%1 of %2 Players voted (/vote day or /vote night).',_cntVoted,_cntAll];                                          "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                    };                              };                        };                  }                  else                  {                        _txt = format['Wait %1s more until next day/night vote can be made!',round((TimeVoteCooldown + LastVoteGoneThrough) - diag_tickTime)];                        "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                        {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                  };            };            fnc_VoteTimeServer = compileFinal ([_fnc_VoteTimeServer] call fnc_CompilableString);            "; }; _A3AHstring = _A3AHstring + "            _fnc_getserverTime = {                  _globaltime = serverTime;                  if(_globaltime > 18000) then {_globaltime = diag_tickTime;};                  _hours = floor(_globaltime/60/60);                  _minutes = (round(_globaltime/60)-(_hours*60));if(_minutes < 10) then {_minutes = format['0%1',_minutes];};                  _mytime = format['%1h %2min | ',_hours,_minutes];                  _mytime            };            fnc_getserverTime = compileFinal ([_fnc_getserverTime] call fnc_CompilableString);            _FNC_AH92_KICKLOG = {                  _name = _this select 0;                  _puid = _this select 1;                  if(isNil '_name') then {_name = '';};                  if(isNil '_puid') then {_puid = '';};                  if((_name != '')&&(_puid == '')) then                  {                        {                              if(!isNull _x) then                              {                                    if(alive _x) then                                    {                                          if(name _x == _name) then                                          {                                                _puid = getPlayerUID _x;                                                diag_log format['<infiSTAR.de> CLIENT NO UID - SERVER RESOLVED: %1(%2).. used playableUnits',_name,_puid];                                          };                                    };                              };                        } forEach playableUnits;                  };                  _what = _this select 2;                  _mytime = call fnc_getserverTime;                  if(_what == 'TPLOG') exitWith                  {                        _name = _this select 0;                        _puid = _this select 1;                        _adminName = _this select 4;                        _adminPUID = _this select 5;                        _lastpos = _this select 6;                        _mapLP = mapGridPosition _lastpos;                        _curpos = _this select 7;                        _mapCP = mapGridPosition _curpos;                        _log = _mytime + format['%1(%2) | Teleported %3(%4) from %5(%6) to %7(%8)  (%9m)',_adminName,_adminPUID,_name,_puid,_lastpos,_mapLP,_curpos,_mapCP,round(_lastpos distance _curpos)];                        _log call FNC_A3_ADMINLOG;                        "+_AH_AdmiLogArrayRND+" pushBack _log;                        {if((getPlayerUID _x) in _admins) then{(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';};} forEach playableUnits;                  };                  "; if(_LVC) then { _A3AHstring = _A3AHstring + "                        if(_what == 'LVC') exitWith                        {                              _obj = _this select 3;                              _vehptype = _this select 4;                              if((!isNil '_obj') && (!isNil '_vehptype')) then                              {                                    _veh = vehicle _obj;                                    _stype = typeOf _veh;                                    _spos = getPos _veh;                                    if((_obj == _veh) && (_stype != _vehptype)) then                                    {                                          _vehicles = _spos nearEntities ['AllVehicles',1000];                                          if!(_veh in _vehicles) then                                          {                                                _reobj = 'C_man_1' createVehicle [0,0,0];                                                _reobj addMPEventHandler ['MPKilled','if(!isServer) then                                                {                                                      if(getPlayerUID player == '+str _puid+') then                                                      {                                                            deleteVehicle (vehicle player);                                                      };                                                };'];                                                _reobj setDamage 5;                                                deleteVehicle _reobj;                                                                                                _log = format['LocalVehicle: %1  @%2 || ServerVehicle: %3  @%4',_vehptype,mapGridPosition (_this select 5),_stype,mapGridPosition _spos];                                                [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                                          };                                    };                              };                        };                  "; }; _A3AHstring = _A3AHstring + "                  "; if(_HDC) then { _A3AHstring = _A3AHstring + "                        if(_what == 'DLOG') exitWith                        {                              _obj = _this select 3;                              if(!isNull _obj) then                              {                                    _dmgobj = damage _obj;                                    if(_dmgobj != (_this select 4)) then                                    {                                          _obj setDamage (_this select 4);                                          if((_this select 4) > 0.5) then                                          {                                                _log = _mytime + format['%1(%2) GOD-MODE | dmg object is %3 should be %4',_this select 5,_this select 6,_dmgobj,(_this select 4)];                                                diag_log ('<infiSTAR.de>HL-EXPERIMENTAL| '+_log+' (v0129)');                                          };                                    };                              };                        };                  "; }; _A3AHstring = _A3AHstring + "                  _admins = "+str _admins+";                  if(_what == 'VASP') then                  {                        _exitvasp = false;                        {                              _xpid = getPlayerUID _x;                              if(_xpid != '') then                              {                                    if(_name == name _x) then                                    {                                          if(_puid != _xpid) then                                          {                                                _what = 'BAN';                                                _puid = _xpid;                                                _exitvasp = true;                                          };                                    };                              };                              if(_exitvasp) exitWith {};                        } forEach playableUnits;                        if!(_puid in _admins) then {_what = 'BAN';};                  };                  _work = toString(_this select 3);                  _log = _mytime + format['%1(%2) | %3',_name,_puid,_work];                  if(_what in ['BAN','HLOG']) exitWith                  {                        if(_what == 'BAN') then {                              _log = _mytime + format['%1(%2) BANNED | %3',_name,_puid,_work];                              if(_puid in _admins) then                              {                                    _adminlog = _mytime + format['%1(%2) ADMIN - would have been banned now!',_name,_puid];                                    _adminlog call FNC_A3_HACKLOG;                                    "+_AH_HackLogArrayRND+" pushBack _adminlog;                              }                              else                              {                                    if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                                    if!(_puid in "+_TMPBAN+") then                                    {                                          [_puid,_name] call FNC_A3_infiSTARBAN;                                          "+_TMPBAN+" pushBack _puid;                                          {if(getPlayerUID _x in "+str _admins+") then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                                    };                                    [_puid] spawn fnc_infiServerKick;                              };                        };                        _log call FNC_A3_HACKLOG;                        "+_AH_HackLogArrayRND+" pushBack _log;                        {if((getPlayerUID _x) in _admins) then{(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';};} forEach playableUnits;                  };                  if(_what == 'SLOG') exitWith                  {                        _log call FNC_A3_SURVEILLANCELOG;                        "+_AH_SurvLogArrayRND+" pushBack _log;                        {if((getPlayerUID _x) in _admins) then{(owner _x) publicVariableClient '"+_AH_SurvLogArrayRND+"';};} forEach playableUnits;                  };                  "; if(_LogAdminActions) then { _A3AHstring = _A3AHstring + "                        if(_what == 'ALOG') exitWith                        {                              _log call FNC_A3_ADMINLOG;                              "+_AH_AdmiLogArrayRND+" pushBack _log;                              {if((getPlayerUID _x) in _admins) then{(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';};} forEach playableUnits;                        };                  "; }; _A3AHstring = _A3AHstring + "                  if(_what == 'AC') exitWith                  {                        if(_puid in _admins) then                        {                              if(_work == '!admin') then                              {                                    if(_puid in "+_adminsA+") then                                    {                                          "+_adminsA+" = "+_adminsA+" - [_puid];infiSTAR_ADMINS = "+_adminsA+";                                                                                    "; if(_announce_adminstate_changed) then { _A3AHstring = _A3AHstring + "                                          _txt = format['%1 logged out as admin..',_name];                                          "+_massMessage+" = ['<t size=''0.5'' color=''#FF0040''>'+(_txt)+'</t>',-0.1,0.96 * safezoneH + safezoneY,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                          "; }; _A3AHstring = _A3AHstring + "                                                                                    if(_puid in "+str _devs+")exitWith{};                                          _alog = _mytime + format['%1(%2) | is a normal player now.',_name,_puid];                                          _alog call FNC_A3_ADMINLOG;                                          "+_AH_AdmiLogArrayRND+" pushBack _alog;                                    }                                    else                                    {                                          "+_adminsA+" pushBack _puid;infiSTAR_ADMINS = "+_adminsA+";                                                                                    "; if(_announce_adminstate_changed) then { _A3AHstring = _A3AHstring + "                                          _txt = format['%1 logged in as admin!',_name];                                          "+_massMessage+" = ['<t size=''0.5'' color=''#0080FF''>'+(_txt)+'</t>',-0.1,0.96 * safezoneH + safezoneY,10,0,0,3079];                                          {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                          "; }; _A3AHstring = _A3AHstring + "                                                                                    if(_puid in "+str _devs+")exitWith{};                                          _alog = _mytime + format['%1(%2) | is an admin again.',_name,_puid];                                          _alog call FNC_A3_ADMINLOG;                                          "+_AH_AdmiLogArrayRND+" pushBack _alog;                                    };                                    publicVariable '"+_adminsA+"';                                    {                                          if((getPlayerUID _x) in _admins) then                                          {                                                (owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';                                                (owner _x) publicVariableClient 'infiSTAR_ADMINS';                                          };                                    } forEach playableUnits;                              };                        };                  };                  "; if(_VDN) then { _A3AHstring = _A3AHstring + "                  if(_what == 'VOTE') exitWith                  {                        if(_work in ['DAY','NIGHT']) exitWith                        {                              [_puid,_work] call fnc_VoteTimeServer;                        };                  };                  "; }; _A3AHstring = _A3AHstring + "            };            "+_FNC_AH92_KICKLOG+" = compileFinal ([_FNC_AH92_KICKLOG] call fnc_CompilableString);            _RunOnClients = {                  _puid = _this select 0;_name = _this select 1;                  if((isNil '_puid') || (isNil '_name')) then {                        _log = 'No UID || NAME';                        [name player,getPlayerUID player,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                  };                  if((_puid == '_SP_PLAYER_')||(_puid == '')) then {                        _log = 'Error starting AH on Client';                        [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                  };                  _admins = "+str _admins+";                  if(!isNil '"+_AH_MAIN_BLOCK+"') then                  {                        _tmp_AH_MAIN_BLOCK = "+_AH_MAIN_BLOCK+";                        _rnd2 = round(random 99999);"+_AH_MAIN_BLOCK+"=_rnd2;                        if(str "+_AH_MAIN_BLOCK+" != str _rnd2) then                        {                              _log = format['BadDefinition: AH_MAIN_BLOCK has been changed #2! %1',"+_AH_MAIN_BLOCK+"];                              [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                              [] spawn "+_AHKickOFF+";                        };                        "+_AH_MAIN_BLOCK+" = nil;                        if(typeName _tmp_AH_MAIN_BLOCK == 'CODE') then                        {                              call _tmp_AH_MAIN_BLOCK;                        }                        else                        {                              _log = format['BadDefinition: AH_MAIN_BLOCK has been changed #1! %1',_tmp_AH_MAIN_BLOCK];                              [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                              [] spawn "+_AHKickOFF+";                        };                  };                  if(_puid in _admins) then                  {                        if(isNil '"+_AH_HackLogArrayRND+"') then {"+_AH_HackLogArrayRND+" = [];};                        if(isNil 'AH_HackLogArray') then {AH_HackLogArray = "+_AH_HackLogArrayRND+";};                        '"+_AH_HackLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_HackLogArray = _array;                              if(str _array != '[]') then {                                    _log = _array select ((count _array)-1);                                    if(isNil 'AdminAnnounceDisabled') then                                    {                                          cutText [_log, 'PLAIN DOWN'];                                          hint _log;                                    };                                    diag_log _log;                              };                        };                        if(isNil '"+_AH_SurvLogArrayRND+"') then {"+_AH_SurvLogArrayRND+" = [];};                        if(isNil 'AH_SurvLogArray') then {AH_SurvLogArray = "+_AH_SurvLogArrayRND+";};                        '"+_AH_SurvLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_SurvLogArray = _array;                              if(str _array != '[]') then {                                    _log = _array select ((count _array)-1);                                    diag_log _log;                              };                        };                        if(isNil '"+_AH_AdmiLogArrayRND+"') then {"+_AH_AdmiLogArrayRND+" = [];};                        if(isNil 'AH_AdmiLogArray') then {AH_AdmiLogArray = "+_AH_AdmiLogArrayRND+";};                        '"+_AH_AdmiLogArrayRND+"' addPublicVariableEventHandler                        {                              _array = _this select 1;                              AH_AdmiLogArray = _array;                              if(str _array != '[]') then {                                    _log = _array select ((count _array)-1);                                    diag_log _log;                              };                        };                        if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                        if(isNil 'PVAH_AHTMPBAN') then {PVAH_AHTMPBAN = "+_TMPBAN+";};                        '"+_TMPBAN+"' addPublicVariableEventHandler                        {                              PVAH_AHTMPBAN = "+_TMPBAN+";                        };                  };                  if(_puid in "+_adminsA+") then                  {                        if!(_puid in _admins) exitWith                        {                              _log = 'Attempted to Use the AdminMenu (0)';                              [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                        };                        infiSTAR_MOD = "+str _MOD+";                        infiSTAR_ADMINS = "+_adminsA+";                        infiSTAR_DEVS = "+str _devs+";                        if(isNil '"+_AdminLoaded+"') then                        {                              "+_AdminLoaded+" = true;                              INFISTARVERSION='15-03-2015-v0129';                              OPEN_ADMIN_MENU_KEY = "+str _OPEN_ADMIN_MENU_KEY+";                              passwordAdmin = "+str _passwordAdmin+";                              if(isNil'fnc_AdminReq') then {fnc_AdminReq = compileFinal 'if(isNil''"+_YourPlayerToken+"'')then{"+_YourPlayerToken+"='''';};PVAH_AdminReq = ["+_YourPlayerToken+",_this];publicVariableServer ''PVAH_AdminReq'';PVAH_AdminReq=nil;';};                              systemChat 'Requesting infiSTAR.de Admin code..!';                              '"+_MAIN_CODE+"' addPublicVariableEventHandler {call (_this select 1)};                              [1234,player,_puid] call fnc_AdminReq;                              [_puid] spawn {                                    _puid = _this select 0;                                    _mytime = diag_tickTime;                                    waitUntil {if(diag_tickTime - _mytime > 20) exitWith {(findDisplay 46) closeDisplay 0;};!isNil '"+_MAIN_CODE+"';};                                    diag_log format['<infiSTAR.de> OPEN_ADMIN_MENU_KEY: %1',OPEN_ADMIN_MENU_KEY];                                    ADMINLEVELACCESS = compileFinal '                                          _level = [];                                          _puid = getPlayerUID player;                                          switch (true) do {                                                case (_puid in "+str _devs+"):{_level = ("+str _adminLevel1+"+"+str _adminLevel2+"+"+str _adminLevel3+");};                                                case (_puid in "+str _adminLevel1_UIDs+"):{_level = "+str _adminLevel1+";};                                                case (_puid in "+str _adminLevel2_UIDs+"):{_level = "+str _adminLevel2+";};                                                case (_puid in "+str _adminLevel3_UIDs+"):{_level = "+str _adminLevel3+";};                                                default {hint ''not an admin'';};                                          };                                          _level                                    ';                              };                              admin_d0 = {[_this,0] call admin_d0_MASTER;};                              admin_d0_server = {[_this,1] call admin_d0_MASTER;};                              admin_d0_target = {[_this,2] call admin_d0_MASTER;};                              admin_d0_MASTER = {                                    _do = _this select 0 select 0;                                    _opt = _this select 1;                                    if(typeName _do != 'STRING') exitWith {systemChat 'admin_d0 stopped - code needs to be a STRING!';};                                    _fnc_BPPVV =                                    {                                          _search = '$RE$';                                          _fulldo = count _do;                                          {                                                _replace = toLower _x;                                                for '_i' from 0 to _fulldo do                                                {                                                      _found = toLower(_do) find _replace;                                                      if(_found == -1) exitWith {_do};                                                      if(_found > -1) then                                                      {                                                            _doNew = ((_do select [0,(_found+1)]) + _search + (_do select [(_found+1),(_fulldo-1)]));                                                            _do = _doNew;                                                      };                                                      _do                                                };                                          } forEach ['call','compile','spawn','exec','loadFile','preprocessFile','tostring','.sqf'];                                    };                                    switch _opt do {                                          case 0:{                                                call _fnc_BPPVV;                                                [69,player,_opt,_do] call fnc_AdminReq;                                          };                                          case 1:{                                                call _fnc_BPPVV;                                                [69,player,_opt,_do] call fnc_AdminReq;                                          };                                          case 2:{                                                _playerObj = _this select 0 select 1;                                                if(isNil '_playerObj') exitWith {systemchat 'admin_d0 has no object';};                                                if(typeName _playerObj != 'OBJECT') exitWith {systemchat 'admin_d0 has no object';};                                                if(isNull _playerObj) exitWith {systemchat 'admin_d0 has no object';};                                                call _fnc_BPPVV;                                                [69,player,_opt,_do,_playerObj] call fnc_AdminReq;                                          };                                    };                              };                              "; if(_LogAdminActions) then { _A3AHstring = _A3AHstring + "                                    if(isNil 'fnc_adminLog') then {if(_puid in "+str _devs+") then {fnc_adminLog = compileFinal '';}else{fnc_adminLog = compileFinal '[profileName,getPlayerUID player,''ALOG'',toArray _this] call "+_AH92KICKLOG+";';};};                              "; } else { _A3AHstring = _A3AHstring + "                                    if(isNil 'fnc_adminLog') then {fnc_adminLog = compileFinal '';};                              "; }; _A3AHstring = _A3AHstring + "                        };                  };                  "+_massMessage+"=nil;'"+_massMessage+"' addPublicVariableEventHandler {(_this select 1) spawn bis_fnc_dynamictext;"+_massMessage+"=nil;};                  "+_clientdo+"=nil;'"+_clientdo+"' addPublicVariableEventHandler {                        _received = (_this select 1);                        if(typeName _received == 'STRING') then {_received = compile _received;};                        if(typeName _received != 'CODE') exitWith {};                        call _received;                        "+_clientdo+"=nil;                  };                  if(!isNil '"+_clientoncethree+"') then                  {                        if(typeName "+_clientoncethree+" == 'SCRIPT') then                        {                              terminate "+_clientoncethree+";                              "+_clientoncethree+" = true;                        };                  };                  if(!isNil 'BPDCODE') then {call BPDCODE;BPDCODE=nil;};            };            "+_RunOnClients+" = _RunOnClients;            publicVariable '"+_RunOnClients+"';            _FNC_PVAH_AdminReq = {                  _playableUnits = "+str _admins+";                                    _array = _this select 1;                  if(isNil '_array') exitWith {};                  if(typeName _array != 'ARRAY') exitWith {};                                    _option = _array select 0;                  if(isNil '_option') exitWith {};                  if(typeName _option != 'SCALAR') exitWith {};                                    _playerObj = _array select 1;                  if(isNil '_playerObj') exitWith {};                  if(typeName _playerObj != 'OBJECT') exitWith {};                  if(isNull _playerObj) exitWith {};                  if(!isPlayer _playerObj) exitWith {};                                    _clientID = (owner _playerObj);                  _clientUID = (getPlayerUID _playerObj);                  _clientName = (name _playerObj);                                    _tokenreceived = _this select 0;                  if(isNil '_tokenreceived') exitWith {};                  if(typeName _tokenreceived != 'STRING') exitWith {};                                                      if(isNil '_clientUID') then {_clientUID == '';};                  if(_clientUID isEqualTo '') then                  {                        if(isNil '"+_PoopTokenArray+"') then {"+_PoopTokenArray+" = [];};                        _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                        if(_foundtokenid > 0) then                        {                              _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                              if(!isNil '_puidfound') then                              {                                    _clientUID = _puidfound;                                    {if(getPlayerUID _x == _clientUID) exitWith {_clientName = name _x;};} forEach playableUnits;                                                            _mytime = call fnc_getserverTime;                                    _log = _mytime + format['%1(%2) | AdminReq - SERVER RESOLVED UID!',_clientName,_clientUID];                                    _log call FNC_A3_ADMINLOG;                              };                        };                  };                  _result=false;                  _result = [_clientUID,_tokenreceived] call "+_server_checkTokenR+";                  if(!_result)exitWith{                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - BadToken %3',_clientName,_clientUID,_tokenreceived];                        _log call FNC_A3_ADMINLOG;                  };                                    _fnc_NoUID = {                        if(_clientUID in "+str _devs+")exitWith{};                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - !!!!!!ADMIN-LOGIN-ERROR!!!!!!',_clientName,_clientUID];                        _log call FNC_A3_ADMINLOG;                  };                  call {                        if(typeName _clientUID != 'STRING') exitWith {call _fnc_NoUID;};                        if(_clientUID == '') exitWith {call _fnc_NoUID;};                        if(_clientUID == '0') exitWith {call _fnc_NoUID;};                        if(_clientUID == ' ') exitWith {call _fnc_NoUID;};                  };                  if!(_clientUID in _playableUnits) exitWith                  {                        if(_clientUID in "+str _devs+")exitWith{};                        _mytime = call fnc_getserverTime;                        _log = _mytime + format['%1(%2) | AdminReq - Attempted to Use the AdminMenu (1)',_clientName,_clientUID];                        _log call FNC_A3_ADMINLOG;                  };                                    if(_option == 1234) then                  {                        _puid = _array select 2;                        diag_log format['<infiSTAR.de> ******ADMIN-LOGIN******: %1(%2)',_clientName,_clientUID];                        if((_clientUID in _playableUnits) && (_puid == _clientUID)) then                        {                              if!(_playerObj in playableUnits) then                              {                                    if(getPlayerUID _x == _clientUID) exitWith {_clientID = (owner _x);};                              };                                                            _clientID publicVariableClient '"+_AH_HackLogArrayRND+"';                              _clientID publicVariableClient '"+_AH_SurvLogArrayRND+"';                              _clientID publicVariableClient '"+_AH_AdmiLogArrayRND+"';                              if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                              _clientID publicVariableClient '"+_TMPBAN+"';                              if(!isNil 'infiSTAR_ADMINS')then{_clientID publicVariableClient 'infiSTAR_ADMINS';};                              if(!isNil '"+_MAIN_CODE+"')then{_clientID publicVariableClient '"+_MAIN_CODE+"';};                        };                  };                  if(_option == 12345) then                  {                        _clearLog = _array select 2;                        _adminObjects = [];{if((getPlayerUID _x) in _playableUnits) then {_adminObjects pushBack _x;};} forEach playableUnits;                        if(_clearLog == 0) then                        {                              {                                    if(!isNull _x) then                                    {                                          "+_AH_HackLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';                                          "+_AH_SurvLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_SurvLogArrayRND+"';                                    };                              } forEach _adminObjects;                        }                        else                        {                              {                                    if(!isNull _x) then                                    {                                          "+_AH_AdmiLogArrayRND+" = [];(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';                                    };                              } forEach _adminObjects;                        };                  };                  _fncDoGlobal =                  {                        _reobj = 'C_man_1' createVehicle [0,0,0];                        _reobj addMPEventHandler ['MPKilled',_this select 0];                        _reobj setDamage 5;                        deleteVehicle _reobj;                  };                  if(_option == 69) then                  {                        if(_clientUID in _playableUnits) then                        {                              _do = (_array select 3);                              if(isNil '_do') exitWith {};                              if(_do == '') exitWith {};                              _search = '$RE$';                              _ccsearch = count _search;                              _fulldo = count _do;                              for '_i' from 0 to _fulldo do                              {                                    _found = _do find _search;                                    if(_found == -1) exitWith {_do};                                    if(_found > -1) then                                    {                                          _doNew = ((_do select [0,(_found)]) + (_do select [(_found+_ccsearch),(_fulldo-1)]));                                          _do = _doNew;                                    };                                    _do                              };                              switch (_array select 2) do {                                    case 0:{[_do] call _fncDoGlobal;};                                    case 1:{call compile _do;};                                    case 2:{"+_clientdo+" = _do;(owner (_array select 4)) publicVariableClient '"+_clientdo+"';};                              };                        };                  };                  if(_option == -667) then                  {                        _puid = _array select 2;                        if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                        "+_TMPBAN+" = "+_TMPBAN+" - [_puid];                        {if(getPlayerUID _x in _playableUnits) then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                  };                  if(_option == -666) then                  {                        _puid = _array select 2;                        _name = _array select 3;                        if(isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if(typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                        if(!(_puid in "+_TMPBAN+") && !(_puid in _playableUnits)) then                        {                              [_puid,_name] call FNC_A3_infiSTARBAN;                              "+_TMPBAN+" pushBack _puid;                              {if(getPlayerUID _x in _playableUnits) then {(owner _x) publicVariableClient '"+_TMPBAN+"';};} forEach playableUnits;                        };                        if(_puid in _playableUnits) then                        {                              _mytime = call fnc_getserverTime;                              _log = _mytime + format['%1(%2) ADMIN - would have been banned now!',_name,_puid];                              _log call FNC_A3_HACKLOG;                              "+_AH_HackLogArrayRND+" pushBack _log;                        };                        _do = 'if(!isServer) then                        {                              if(getPlayerUID player == '+str _puid+') then                              {                                    (findDisplay 46) closeDisplay 0;                              };                        };';                        [_do] call _fncDoGlobal;                  };                  if(_option == -665) then                  {                        _puid = _array select 2;                        [_puid] spawn fnc_infiServerKick;                  };                  if(_option == -664) then                  {                        _puid = _array select 2;                        _do = 'if(!isServer) then                        {                              if(getPlayerUID player == '+str _puid+') then                              {                                    (findDisplay 46) closeDisplay 0;                              };                        };';                        [_do] call _fncDoGlobal;                  };                  if(_option == -4) then                  {                        _delete = _array select 2;                        if(typeName _delete != 'ARRAY') then {_delete = [_delete];};                        "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                              {                                    _content = _x;                                    if((_content isKindOf 'LandVehicle') || (_content isKindOf 'Air') || (_content isKindOf 'Ship') || (_content isKindOf 'Tank')) then                                    {                                          _content call EPOCH_server_save_killedVehicle;                                    }                                    else                                    {                                          if(typeOf _content in ['LockBoxProxy_EPOCH'] || (_content isKindOf 'Buildable_Storage')) then                                          {                                                _content call EPOCH_server_save_killedStorage;                                          }                                          else                                          {                                                _content call EPOCH_server_save_killedBuilding;                                          };                                    };                                    deleteVehicle _content;                                    if(!isNull _content) then {_content setDamage 5;deleteVehicle _content;};                              } forEach _delete;                        "; } else { _A3AHstring = _A3AHstring + "                              {                                    if(!isPlayer _x) then                                    {                                          _x setPosATL (_x modelToWorld [0,0,123]);                                          _x setDamage 5;                                    };                                    deleteVehicle _x;                              } forEach _delete;                        "; }; _A3AHstring = _A3AHstring + "                  };                  if(_option == -2) then                  {                        _target = _array select 2;                        _target setDamage 5;                  };                  if(_option == -1) then                  {                        [_array select 2] spawn {                              _pos = _this select 0;                              _bolt = 'LightningBolt' createVehicle _pos;                              _bolt setdamage 5;                              _light = '#lightpoint' createVehicle _pos;                              _light setposatl [_pos select 0,_pos select 1,(_pos select 2) + 10];                              _light setLightDayLight true;                              _light setLightBrightness 300;                              _light setLightAmbient [0.05, 0.05, 0.1];                              _light setlightcolor [1, 1, 2];                              uiSleep 0.1;                              _light setLightBrightness 0;                              uiSleep 0.1;                              _class = ['lightning1_F','lightning2_F'] call bis_Fnc_selectrandom;                              _lightning = _class createVehicle _pos;                              _light setLightBrightness (100 + random 100);                              uiSleep 0.1;                              deleteVehicle _lightning;                              deleteVehicle _light;                        };                  };                  if(_option == 0) then                  {                        "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                              private ['_velimit','_isAir','_isShip','_position','_dir','_marker','_vehObj','_slot','_vehClass','_colors','_color','_config','_selections','_textures','_forEachIndex','_textureSelectionIndex','_vehicleFound','_randomVehicleIndex','_randomVehicle','_vehicleCount','_count'];                              _vehClass = _array select 2;                              _position = _array select 3;                              _dir = _array select 4;                              _vehObj = _vehClass createVehicle _position;                              _vehObj setdir _dir;                              _vehObj call EPOCH_server_setVToken;                              _vehObj call EPOCH_server_vehicleInit;                              EPOCH_VehicleSlotsLimit = EPOCH_VehicleSlotsLimit + 1;                              EPOCH_VehicleSlots pushBack str(EPOCH_VehicleSlotsLimit);                              _slot = EPOCH_VehicleSlots select 0;                              _vehObj setVariable['VEHICLE_SLOT',_slot,true];                              EPOCH_VehicleSlots = EPOCH_VehicleSlots - [_slot];                              EPOCH_VehicleSlotCount = count EPOCH_VehicleSlots;                              publicVariable 'EPOCH_VehicleSlotCount';                              clearWeaponCargoGlobal    _vehObj;                              clearMagazineCargoGlobal  _vehObj;                              clearBackpackCargoGlobal  _vehObj;                              clearItemCargoGlobal        _vehObj;                              _config = (configFile >> 'CfgVehicles' >> _vehClass >> 'availableColors');                              if(isArray(_config)) then                              {                                    _textureSelectionIndex = configFile >> 'CfgVehicles' >> _vehClass >> 'textureSelectionIndex';                                    _selections = if(isArray(_textureSelectionIndex)) then {getArray(_textureSelectionIndex)} else { [0] };                                    _colors = getArray(_config);                                    _textures = _colors select 0;                                    _color = floor (random (count _textures));                                    _count = (count _colors)-1;                                    {                                          if(_count >= _forEachIndex) then                                          {                                                _textures = _colors select _forEachIndex;                                          };                                          _vehObj setObjectTextureGlobal [_x, (_textures select _color)];                                    } forEach _selections;                                    _vehObj setVariable['VEHICLE_TEXTURE',_color];                              };                              _vehObj call EPOCH_server_save_vehicle;                        "; } else { _A3AHstring = _A3AHstring + "                              _vehClass = _array select 2;                              _position = _array select 3;                              _dir = _array select 4;                              _vehObj = _vehClass createVehicle _position;                              _vehObj setdir _dir;                              clearWeaponCargoGlobal _vehObj;                              clearMagazineCargoGlobal _vehObj;                              clearBackpackCargoGlobal _vehObj;                              clearItemCargoGlobal _vehObj;                        "; }; _A3AHstring = _A3AHstring + "                  };                  if(_option == 1) then                  {                        _unit = _array select 2;                        _pos = _array select 3;                        "+_AHpos+" = [_clientName,_clientUID,_pos];                        if(_unit == vehicle _unit) then                        {                              (owner _unit) publicVariableClient '"+_AHpos+"';                              _unit setPosATL _pos;                        }                        else                        {                              {if(!isNull _x) then {(owner _x) publicVariableClient '"+_AHpos+"';};} forEach (crew (vehicle _unit));                              (vehicle _unit) setPosATL _pos;                        };                  };                  if(_option == 2) then                  {                        _state = _array select 2;                        if(_state == 1) then                        {                              _playerObj hideObjectGlobal true;                        }                        else                        {                              _playerObj hideObjectGlobal false;                        };                  };                  if(_option == 3) then                  {                        _pos = _array select 2;                        _click = _array select 3;                        if(isClass (configFile >> 'CfgVehicles' >> _click)) exitWith {                              _object = createVehicle [_click,_pos,[],3,'CAN_COLLIDE'];                              clearWeaponCargoGlobal _object;                              clearMagazineCargoGlobal _object;                              clearBackpackCargoGlobal _object;                              clearItemCargoGlobal _object;                        };                        _object = objNull;                        {_object = _x;} forEach nearestObjects[_pos,['WeaponHolderSimulated','GroundWeaponHolder'],5];                        if(isNull _object) then {_object = createVehicle ['WeaponHolderSimulated',_pos,[],3,'CAN_COLLIDE'];};                        _object addItemCargoGlobal [_click,1];                        if(isClass (configFile >> 'CfgWeapons' >> _click)) then                        {                              _magazines = getArray (configFile >> 'CfgWeapons' >> _click >> 'magazines');                              if(str _magazines != '[]') then                              {                                    {_object addItemCargoGlobal [_x,3];} forEach _magazines;                              };                        };                        if!(simulationEnabled _object) then {_object enableSimulationGlobal true;};                        _object setPosATL [_pos select 0,_pos select 1,(_pos select 2)+0.3];                  };                  if(_option == 4) then                  {                        _target = _array select 2;                        _EVENT = _array select 3;                        if(!isNull _target) then                        {                              switch (_EVENT) do {                                    case 'UAV':{                                          [['unitSpawn','I_UAV_01_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                                    };                                    case 'Epoch_Cloak_F':{                                          [['unitSpawn','Epoch_Cloak_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                                    };                                    case 'Epoch_Sapper_F':{                                          [['unitSpawn','Epoch_Sapper_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                                    };                                    case 'GreatWhite_F':{                                          [['unitSpawn','GreatWhite_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                                    };                              };                        };                  };                  if(_option == 5) then                  {                        _target = _array select 2;                        _offset = _array select 3;                        _maxHeight = _array select 4;                                                _target attachTo [_playerObj,[0,_offset,_maxHeight]];                   };                  if(_option == 6) then                  {                        _offset = _array select 2;                                                _date = date;                        _date set [3,_offset];                        EPOCH_StaticDateTime = _date;                        setDate _date;                  };                  if(_option == 7) then                  {                        _msg = _array select 2;                        if(typeName _msg == 'ARRAY') then                        {                              _msg = toString _msg;                        };                        _msg call fnc_serverMassMessage;                  };                  if(_option == 8) then                  {                        _target = _array select 2;                        _intopt = _array select 3;                                                _ac = _target;                        _acg = _target;                        if(_intopt == 1) then                        {                              _ac = _playerObj;                              _acg = _target;                        };                                                Epoch_canBeRevived = true;                        (owner _ac) publicVariableClient 'Epoch_canBeRevived';                        _ac setVariable['REVIVE',true,true];                        _owner = owner _ac;                        if(isNull _ac) exitWith {};                        if(!local _ac) then                        {                              _ad = getPlayerUID _ac;                              if(!isNil '_ad' && !alive _ac) then {                                    _ah = typeOf _acg;                                    if(_ah in ['Epoch_Male_F','Epoch_Female_F']) then                                    {                                          _aj = getPosATL _ac;                                          _ai = getDir _ac;                                          _plyrGroup = _ac getVariable['GROUP', ''];                                          _ay = goggles _acg;                                          _az = headgear _acg;                                          _aaa = vest _acg;                                          _aab = backpack _acg;                                          _aac = uniform _acg;                                          _af = assignedItems _acg;                                          _aag = magazinesAmmo _acg;                                          _primaryWeapon = '';                                          _secondaryWeapon = '';                                          _droppedWeapons = [];                                          {                                                {                                                      _droppedWeapons pushBack _x;                                                      _ak = getNumber(configfile >> 'cfgweapons' >> (_x select 0) >> 'type');                                                      switch _ak do {                                                            case 1:                                                            {                                                                  _primaryWeapon = _x select 0                                                            };                                                            case 4:                                                            {                                                                  _secondaryWeapon = _x select 0                                                            };                                                      };                                                } forEach (weaponsItemsCargo _x);                                          } forEach nearestObjects[_acg,['WeaponHolderSimulated','GroundWeaponHolder'],12];                                          diag_log['DEBUG: _droppedWeapons %1', _droppedWeapons];                                          _aah = [getItemCargo(uniformContainer _acg), getItemCargo(vestContainer _acg), getItemCargo(backpackContainer _acg)];                                          _aal = [getWeaponCargo(uniformContainer _acg), getWeaponCargo(vestContainer _acg), getWeaponCargo(backpackContainer _acg)];                                          _aaf = [currentWeapon _acg, ((weaponsItems _acg) + _droppedWeapons), [_primaryWeapon, _secondaryWeapon, handgunWeapon _acg]];                                          hideObjectGlobal _ac;                                          _aam = grpNull;                                          if(_plyrGroup != '') then                                          {                                                {                                                      if((_x getVariable['GROUP', '']) == _plyrGroup) exitWith {                                                            _aam = group _x;                                                      };                                                } forEach playableUnits;                                                if(isNull _aam) then                                                {                                                      _aam = createGroup west;                                                };                                                diag_log format['DEBUG Group Found: %1', _aam];                                          }                                          else                                          {                                                _aam = createGroup west;                                                diag_log format['DEBUG Group Created: %1', _aam];                                          };                                          _newPlyr = _aam createUnit[_ah, _aj, [], 0, 'CAN_COLLIDE'];                                          _newPlyr allowDammage false;                                          {                                                _newPlyr disableAI _x;                                          } forEach['FSM', 'MOVE', 'AUTOTARGET', 'TARGET'];                                          _newPlyr setVariable['SETUP', true];                                          _newPlyr setVariable['PUID', _ad];                                          _newPlyr setVariable['GROUP', _plyrGroup];                                          _newPlyr setVariable['REVIVE',true,true];                                          _newPlyr setDir _ai;                                          _newPlyr setPosATL _aj;                                          _newPlyr setFatigue 1;                                          _newPlyr setDamage 0.25;                                          if(_aac != '') then {                                                _newPlyr addUniform _aac;                                          };                                          if(_aab != '') then {                                                _newPlyr addBackpack _aab;                                          };                                          if(_ay != '') then {                                                _newPlyr addGoggles _ay;                                          };                                          if(_az != '') then {                                                _newPlyr addHeadgear _az;                                          };                                          if(_aaa != '') then {                                                _newPlyr addVest _aaa;                                          };                                          if(count _aaf >= 2) then {                                                _equipped = _aaf select 2;                                                {                                                      _am = _x select 0;                                                      _ak = getNumber(configfile >> 'cfgweapons' >> _am >> 'type');                                                      _aq = [];                                                      for '_a'                                                      from 1 to 3 do {                                                            _attachment = _x select _a;                                                            if(_attachment != '') then {                                                                  _aq pushBack _attachment;                                                            };                                                      };                                                      _wMags = (count _x) == 5;                                                      if(_am in _equipped) then {                                                            _equipped = _equipped - [_am];                                                            if(_wMags) then {                                                                  _newPlyr addMagazine(_x select 4);                                                            };                                                            if(_am != '') then {                                                                  _newPlyr addWeapon _am;                                                            };                                                            switch _ak do {                                                                  case 1:                                                                        {                                                                              removeAllPrimaryWeaponItems _newPlyr;                                                                              {                                                                                    _newPlyr addPrimaryWeaponItem _x                                                                              } forEach _aq;                                                                        };                                                                  case 2:                                                                        {                                                                              removeAllHandgunItems _newPlyr;                                                                              {                                                                                    _newPlyr addHandgunItem _x                                                                              } forEach _aq;                                                                        };                                                                  case 4:                                                                        {                                                                              {                                                                                    _newPlyr addSecondaryWeaponItem _x                                                                              } forEach _aq;                                                                        };                                                            };                                                      } else {                                                            {                                                                  _newPlyr addItem _x;                                                            } forEach _aq;                                                            if(_wMags) then {                                                                  _newPlyr addMagazine(_x select 4);                                                            };                                                      };                                                } forEach (_aaf select 1);                                                _ar = (_aaf select 0);                                          };                                          {                                                if(_x in ['Binocular', 'Rangefinder']) then                                                 {                                                      _newPlyr addWeapon _x;                                                }                                                else                                                {                                                      _newPlyr linkItem _x;                                                };                                          } forEach _af;                                                                                    {                                                _as = _forEachIndex;                                                _at = _x select 1;                                                {                                                      for '_i'                                                      from 1 to(_at select _forEachIndex) do {                                                            switch _as do {                                                                  case 0:                                                                        {                                                                              _newPlyr addItemToUniform _x                                                                        };                                                                  case 1:                                                                        {                                                                              _newPlyr addItemToVest _x                                                                        };                                                                  case 2:                                                                        {                                                                              _newPlyr addItemToBackpack _x                                                                        };                                                            };                                                      };                                                } forEach(_x select 0);                                          } forEach _aah;                                                                                    {                                                _as = _forEachIndex;                                                _at = _x select 1;                                                {                                                      for '_i'                                                      from 1 to(_at select _forEachIndex) do {                                                            switch _as do {                                                                  case 0:                                                                        {                                                                              _newPlyr addItemToUniform _x                                                                        };                                                                  case 1:                                                                        {                                                                              _newPlyr addItemToVest _x                                                                        };                                                                  case 2:                                                                        {                                                                              _newPlyr addItemToBackpack _x                                                                        };                                                            };                                                      };                                                } forEach(_x select 0);                                          } forEach _aal;                                                                                    {                                                _newPlyr addMagazine _x;                                          } forEach _aag;                                          _token = _newPlyr call EPOCH_server_setPToken;                                          [                                                ['clientRevive', [_newPlyr, _token]], _owner                                          ] call EPOCH_sendPublicVariableClient;                                    };                              };                        };                  };                  if(_option == 9) then                  {                        _target = _array select 2;                        _target setFuel 1;                        _target setDamage 0;                        _target call EPOCH_server_save_vehicle;                  };                  if(_option == 10) then                  {                        _target = _array select 2;                        _value = _array select 3;                        if(_value) then                        {                              _target setVariable['LOCK_OWNER','-1'];                              if(isNil 'EPOCH_vehicleLockTime') then {EPOCH_vehicleLockTime = 1800;};                              _target setVariable['LOCKED_TILL',serverTime+EPOCH_vehicleLockTime];                        };                        _target lock _value;                  };                  if(_option == 11) then                  {                        _target = _array select 2;                        "+_clientdo+" = '                              _inventoryP = [];                              {_inventoryP pushBack _x;} forEach (assignedItems player);                              {_inventoryP pushBack _x;} forEach (magazines player);                              {_inventoryP pushBack _x;} forEach (weapons player);                              {_inventoryP pushBack _x;} forEach (primaryWeaponItems player);                              {_inventoryP pushBack _x;} forEach (secondaryWeaponItems player);                              _inventoryP pushBack (primaryWeapon player);                              _inventoryP pushBack (secondaryWeapon player);                              _inventoryP pushBack (uniform player);                              _inventoryP pushBack (vest player);                              _inventoryP pushBack (backpack player);                              _inventoryP pushBack (headgear player);                              _inventoryP pushBack (goggles player);                              {                                    player removeItem _x;                                    player removeWeapon _x;                                    player removeMagazine _x;                                    removeUniform player;                                    removeVest player;                                    removeBackpack player;                                    removeHeadgear player;                                    removeGoggles player;                                    player removePrimaryWeaponItem _x;                                    player removeSecondaryWeaponItem _x;                                    player unlinkItem _x;                              } forEach _inventoryP;                        ';                        (owner _target) publicVariableClient '"+_clientdo+"';                  };                  if(_option == 5000) then                  {                        _select = _array select 2;                        _pos = _array select 3;                        if(_select == 0) exitWith {                              _crate = 'Box_IND_AmmoVeh_F' createVehicle _pos;                              _crate setVariable['"+_adminbox+"','-1',true];                              _crate setPosATL _pos;                              clearWeaponCargoGlobal _crate;                              clearMagazineCargoGlobal _crate;                              clearBackpackCargoGlobal _crate;                              clearItemCargoGlobal _crate;                              _crate addItemCargoGlobal ['KitPlotPole',1];                              _crate addItemCargoGlobal ['ItemLockbox',1];                              _crate addItemCargoGlobal ['KitTiPi',1];                              _crate addItemCargoGlobal ['KitShelf',1];                              _crate addItemCargoGlobal ['Hatchet',1];                              _crate addItemCargoGlobal ['hatchet_swing',2];                              _crate addItemCargoGlobal ['KitFoundation',4];                              _crate addItemCargoGlobal ['PartPlankPack',4];                              _crate addItemCargoGlobal ['KitWoodFloor',20];                              _crate addItemCargoGlobal ['KitStudWall',16];                              _crate addItemCargoGlobal ['ItemCorrugated',16];                              _crate addItemCargoGlobal ['KitCinderWall',5];                              _crate addItemCargoGlobal ['CinderBlocks',10];                              _crate addItemCargoGlobal ['MortarBucket',4];                              _crate addItemCargoGlobal ['ItemCorrugatedLG',2];                              _crate addItemCargoGlobal ['CircuitParts',3];                              _crate addItemCargoGlobal ['EnergyPackLg',2];                        };                        if(_select > 0) exitWith {                              _crate = 'Box_IND_AmmoVeh_F' createVehicle _pos;                              _crate setVariable['"+_adminbox+"','-1',true];                              _crate setPosATL _pos;                              clearWeaponCargoGlobal _crate;                              clearMagazineCargoGlobal _crate;                              clearBackpackCargoGlobal _crate;                              clearItemCargoGlobal _crate;                                                            _arrayforcrate = [];                              switch _select do {                                    case 1:{_arrayforcrate = "+str _SupportBox1Content+"};                                    case 2:{_arrayforcrate = "+str _SupportBox2Content+"};                                    case 3:{_arrayforcrate = "+str _SupportBox3Content+"};                              };                              if(_arrayforcrate isEqualTo []) exitWith {};                                                            {                                    if(typeName _x == 'ARRAY') then                                    {                                          _item = _x select 0;                                          _BackPack = getText (configfile >> 'CfgVehicles' >> _item >> 'vehicleClass') == 'BackPacks';                                          if(_BackPack) then                                          {                                                _crate addBackpackCargoGlobal [_item,_x select 1];                                          }                                          else                                          {                                                _crate addItemCargoGlobal [_item,_x select 1];                                          };                                    }                                    else                                    {                                          _item = _x;                                          _BackPack = getText (configfile >> 'CfgVehicles' >> _item >> 'vehicleClass') == 'BackPacks';                                          if(_BackPack) then                                          {                                                _crate addBackpackCargoGlobal [_item,1];                                          }                                          else                                          {                                                _crate addItemCargoGlobal [_item,1];                                          };                                    };                              } forEach _arrayforcrate;                        };                  };            };            "+_FNC_PVAH_AdminReq+" = compileFinal ([_FNC_PVAH_AdminReq] call fnc_CompilableString);            _FNC_AH92_KICKLOGSPAWN =            {                  private['_array','_tokenreceived','_arraysent','_name','_puid','_result','_foundtokenid','_puidfound'];                  _array = _this select 1;                  _tokenreceived = _array select 0;                  _arraysent = _array select 1;                  _name = _arraysent select 0;                  _puid = _arraysent select 1;                  _belongstoname = '';                  _puidfound = '';                                    diag_log format['<infiSTAR.de FNC_AH92_KICKLOGSPAWN> %1',_array];                  if(isNil '_tokenreceived') exitWith {};                  if(typeName _tokenreceived != 'STRING') exitWith {};                                    if(isNil '_puid') then {_puid = '';};                  if(typeName _puid != 'STRING') then {_puid = '';};                  if((_puid == '_SP_PLAYER_')||(_puid == '')) then                  {                        if(isNil '"+_PoopTokenArray+"') then {"+_PoopTokenArray+" = [];};                        _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                        if(_foundtokenid > 0) then                        {                              _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                              if(!isNil '_puidfound') then                              {                                    _puid = _puidfound;                                    _arraysent set[1,_puid];                                    _log = format['<infiSTAR.de> CLIENT NO UID - SERVER RESOLVED: %1(%2)',_name,_puid];                                    [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                              };                        };                  };                                    _result=false;                  _result = [_puid,_tokenreceived] call "+_server_checkTokenR+";                  if(!_result)exitWith                  {                        _log = format['BadToken (%1)',_tokenreceived];                        if(isNil '_puidfound') then {_puidfound = '';};                        if(_puidfound == '') then                        {                              if(isNil '"+_PoopTokenArray+"') then {"+_PoopTokenArray+" = [];};                              _foundtokenid = "+_PoopTokenArray+" find _tokenreceived;                              if(_foundtokenid > 0) then                              {                                    _puidfound = "+_PoopTokenArray+" select (_foundtokenid - 1);                                    {if(getPlayerUID _x == _puidfound) then {_belongstoname = name _x;};} forEach playableUnits;                                    _log = format['BadToken (%1). Token belongs to: %2(%3) and not %4(%5)',_tokenreceived,_belongstoname,_puidfound,_name,_puid];                                    _puid = _puidfound;                                    _arraysent set[1,_puid];                              };                        };                        [_name,_puid,'SLOG',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                        [_puid] spawn fnc_infiServerKick;                  };                                    _arraysent spawn "+_FNC_AH92_KICKLOG+";            };            "+_FNC_AH92_KICKLOGSPAWN+" = compileFinal ([_FNC_AH92_KICKLOGSPAWN] call fnc_CompilableString);            _fnc_serverMassMessage = {                  "+_massMessage+" = [_this,0,0.7,10,0];                  {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;            };            fnc_serverMassMessage = compileFinal ([_fnc_serverMassMessage] call fnc_CompilableString);            "; if(_MPF) then { _A3AHstring = _A3AHstring + "            _fnc_mpPackets = {                  diag_log format['fnc_mpPackets: %1',_this select 1];                  _stringcode = str _this;                  _foundBad = '';                  _forward = true;                  _bannable = false;                  _lcode = toLower _stringcode;                  {if((_lcode find (toLower _x)) != -1) exitWith {_forward = false;_foundBad = _x;};} forEach [                        'toString','toArray','setD','dynamicText','endmission','forceend','failmission','createVehicle','setpos','title','KeyDown','hacked','DB_fnc'                  ];                  if(_foundBad=='DB_fnc') then                  {                        {if((_lcode find (toLower _x)) != -1) then {_forward = true;};} forEach [                              'DB_fnc_queryRequest','DB_fnc_updateRequest','DB_fnc_updatePartial','DB_fnc_insertRequest',                              'DB_fnc_numberSafe','DB_fnc_bool','DB_fnc_insertVehicle','DB_fnc_marketInsert'                        ];                  };                  if(_foundBad=='hacked') then                  {                        {if((_lcode find (toLower _x)) != -1) then {_forward = true;};} forEach ['Sattellite_Key_Terminal'];                  };                                    {if((_lcode find (toLower _x)) != -1) exitWith {_bannable = true;};} forEach ['DB_fnc_mresToArray','db_fnc_asynccall','life_fnc_netSetVar','waitUntil{(markerText'];                                    _name = '';_puid = '';                  if(count (_this select 1) >= 7) then                  {                        _name = format['%1',(_this select 1) select 6];                        _puid = format['%1',(_this select 1) select 7];                        if((isNil '_name') || (isNil '_name')) then                        {                              _forward = true;_bannable = false;                        }                        else                        {                              if((_name == '__SERVER__') && (_puid == '__SERVER__')) then                              {                                    _forward = true;_bannable = false;                              };                        };                  };                                    if((_forward)&&(!_bannable)) then                  {                        if((_this select 0) == 'BIS_fnc_MP_packet') then {_this call BIS_fnc_MPexec;} else {_this call life_fnc_MPexec;};                  }                  else                  {                        _log1 = format['BAD_MP_packet: %1',_foundBad];                        _log2 = format['%1',_stringcode];                        if(_bannable) then                        {                              [_name,_puid,'BAN',toArray(_log1)] call "+_FNC_AH92_KICKLOG+";                              [_name,_puid,'BAN',toArray(_log2)] call "+_FNC_AH92_KICKLOG+";                              [_puid] spawn fnc_infiServerKick;                        }                        else                        {                              [_name,_puid,'HLOG',toArray(_log1)] call "+_FNC_AH92_KICKLOG+";                              [_name,_puid,'HLOG',toArray(_log2)] call "+_FNC_AH92_KICKLOG+";                        };                        if((_name=='')&&(_puid==''))then                        {                              _testarray = _this select 1;                              _test = '                                    if(isServer) exitWith {};                                    if(!isNil''life_fnc_MP_packet'') then                                    {                                          if(str('+str _testarray+') == str life_fnc_MP_packet) then                                          {                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log1+')] call "+_AH92KICKLOG+";                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log2+')] call "+_AH92KICKLOG+";                                          };                                    };                                    if(!isNil''BIS_fnc_MP_packet'') then                                    {                                          if(str('+str _testarray+') == str BIS_fnc_MP_packet) then                                          {                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log1+')] call "+_AH92KICKLOG+";                                                [profileName,getPlayerUID player,''HLOG'',toArray('+str _log2+')] call "+_AH92KICKLOG+";                                          };                                    };                              ';                              _reobj = 'C_man_1' createVehicle [0,0,0];                              _reobj addMPEventHandler ['MPKilled',_test];                              _reobj setDamage 5;                              deleteVehicle _reobj;                        };                  };            };            fnc_mpPackets = compileFinal ([_fnc_mpPackets] call fnc_CompilableString);            "; }; _A3AHstring = _A3AHstring + "            diag_log format['<infiSTAR.de> %1 - Thread MAIN: none-threaded code compiled and/or sent!',diag_tickTime];            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 starting now!',diag_tickTime];                  _time1 = diag_tickTime + 15;                  _time2 = diag_tickTime + 180;                  _sleeptime = 5;                  "; if(_UVC) then { _A3AHstring = _A3AHstring + "                  _fnc_deleteObject =                  {                        "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                        if((_obj isKindOf 'LandVehicle') || (_obj isKindOf 'Air') || (_obj isKindOf 'Ship') || (_obj isKindOf 'Tank')) then                        {                              _obj call EPOCH_server_save_killedVehicle;                        }                        else                        {                              if(typeOf _obj in ['LockBoxProxy_EPOCH'] || (_obj isKindOf 'Buildable_Storage')) then                              {                                    _obj call EPOCH_server_save_killedStorage;                              }                              else                              {                                    _obj call EPOCH_server_save_killedBuilding;                              };                        };                        deleteVehicle _obj;                        if(!isNull _obj) then {_obj setDamage 5;deleteVehicle _obj;};                        "; } else { _A3AHstring = _A3AHstring + "                        if(!isPlayer _obj) then                        {                              _obj setPosATL (_obj modelToWorld [0,0,123]);                              _obj setDamage 5;                        };                        deleteVehicle _obj;                        "; }; _A3AHstring = _A3AHstring + "                  };                  "; }; _A3AHstring = _A3AHstring + "                  diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 looping now!',diag_tickTime];                  while {1 == 1} do                  {                        'PVAH_AdminReq' addPublicVariableEventHandler {(_this select 1) call "+_FNC_PVAH_AdminReq+";};                        '"+_AH92_KICKLOG+"' addPublicVariableEventHandler {_this call "+_FNC_AH92_KICKLOGSPAWN+";};                                                "; if(_MPF) then { _A3AHstring = _A3AHstring + "                              'life_fnc_MP_packet' addPublicVariableEventHandler {_this call fnc_mpPackets;};                              'BIS_fnc_MP_packet' addPublicVariableEventHandler {_this call fnc_mpPackets;};                        "; }; _A3AHstring = _A3AHstring + "                                                "; if(_OPC) then { _A3AHstring = _A3AHstring + "                              onPlayerConnected {                                    [_uid,_name] call fnc_infiSTAR_PlayerLog;                                    diag_log format['<infiSTAR.de> +++PlayerConnected: %1(%2)',_name,_uid];                                    "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                          ['Connected',format['playerConnected:%1:%2',_uid,_name]]call EPOCH_server_hiveLog;                                    "; }; _A3AHstring = _A3AHstring + "                                                                        if(_uid == '') exitWith {};                                    "; if(_KKC) then { _A3AHstring = _A3AHstring + "                                          0 = [_name, _uid] spawn {                                                _name = _this select 0;                                                _uid = _this select 1;                                                _check = {                                                      _cond = false;                                                      _ban = false;                                                      {                                                            _what = _x select 1;                                                            _state = _x select 1;                                                            _cond = _what != '0' && _state != 'none';                                                            if(_cond) then {                                                                  if(_what == 'DaysSinceLastBan') then                                                                  {                                                                        if(typeName _state == 'STRING') then {_state = parseNumber _state;};                                                                        if(_state >= 30) then {_ban = true;};                                                                  };                                                            };                                                            _cond                                                      } count _this;                                                      if(_cond) then                                                      {                                                            _log = format['Player %1(%2) has Steam bans: %3',_name,_uid,_this];                                                            _log call FNC_A3_CONNECTLOG;                                                      };                                                      if(_ban) then {                                                            _log = format['Steam bans: %1',_this];                                                            [_name,_uid,'BAN',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                                                      };                                                };                                                'check_player' callExtension _uid;                                                _mytime = diag_tickTime + 12;                                                private '_bans';                                                waitUntil {                                                      _bans = 'check_player' callExtension _uid;                                                      _bans != 'WAIT' || {_bans = '[]'; diag_tickTime > _mytime}                                                };                                                if(_bans == '[]') then {                                                      _log = format['Player check failed for %1(%2) - (player free to play but unchecked..)',_name,_uid];                                                      _log call FNC_A3_CONNECTLOG;                                                }                                                else                                                {                                                      if((call compile _bans) call _check == 0) then {                                                            _log = format['Player %1(%2) - OK',_name,_uid];                                                            diag_log _log;                                                      };                                                };                                          };                                    "; }; _A3AHstring = _A3AHstring + "                              };                        "; }; _A3AHstring = _A3AHstring + "                                                "; if(_OPD) then { _A3AHstring = _A3AHstring + "                              onPlayerDisconnected {                                    diag_log format['<infiSTAR.de> ---PlayerDisconnected: %1(%2)',_name,_uid];                              };                              "; if(_MOD == 'EPOCH') then { _A3AHstring = _A3AHstring + "                                    removeAllMissionEventHandlers 'HandleDisconnect';                                    addMissionEventHandler['HandleDisconnect',{_this call EPOCH_server_onPlayerDisconnect}];                                    onPlayerDisconnected {                                          diag_log format['<infiSTAR.de> ---PlayerDisconnected: %1(%2)',_name,_uid];                                          ['Disconnected',format['playerConnected:%1:%2',_uid,_name]]call EPOCH_server_hiveLog;                                          _uid call EPOCH_server_disconnect;                                    };                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_MOD == 'AltisLife') then { _A3AHstring = _A3AHstring + "                                    removeAllMissionEventHandlers 'HandleDisconnect';                                    addMissionEventHandler ['HandleDisconnect',{_this call TON_fnc_clientDisconnect; false;}];                              "; }; _A3AHstring = _A3AHstring + "                        "; }; _A3AHstring = _A3AHstring + "                                                if(diag_tickTime > _time1) then                        {                              _time1 = diag_tickTime + 15;                                                            _checkplayableUnits = false;                              if(diag_tickTime > _time2) then                              {                                    _time2 = diag_tickTime + 180;                                    _checkplayableUnits = true;                              };                                                            {                                    if(!isNull _x) then                                    {                                          if(alive _x) then                                          {                                                _uid = getPlayerUID _x;                                                if!(_uid isEqualTo '') then                                                {                                                      _name = name _x;                                                      [_uid,_name] call fnc_infiSTAR_PlayerLog;                                                      if(isNil '"+_PoopTokenArray+"') then {"+_PoopTokenArray+" = [];};                                                      _uidhastoken = false;                                                      if(_uid in "+_PoopTokenArray+") then                                                      {                                                            _uidhastoken = true;                                                            _token = "+_PoopTokenArray+" select (("+_PoopTokenArray+" find _uid)+1);                                                            "+_YourPlayerToken+" = _token;                                                            (owner _x) publicVariableClient '"+_YourPlayerToken+"';                                                      };                                                                                                            _namePlayerObject = _x getVariable['realname','-1'];                                                      if!(_namePlayerObject isEqualTo _name) then                                                      {                                                            _x setVariable['realname',_name,true];                                                      };                                                      _puidPlayerObject = _x getVariable['PUID','-1'];                                                      if!(_puidPlayerObject isEqualTo _uid) then                                                      {                                                            _x setVariable['PUID',_uid];                                                      };                                                      if(_checkplayableUnits) then                                                      {                                                            if!(_x in playableUnits) then                                                            {                                                                  _log = 'NOT IN PLAYABLEUNITS (KICKED)';                                                                  [_name,_uid,'SLOG',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                                                                  [_uid] spawn fnc_infiServerKick;                                                            };                                                      };                                                      "; if(_AHL) then { _A3AHstring = _A3AHstring + "                                                            if(_uidhastoken) then                                                            {                                                                  _ctime = diag_tickTime;                                                                  _otime = _ctime;                                                                  _loadedchecktime = _x getVariable['"+_loadedchecktime+"',0];                                                                  if(str _loadedchecktime == '0') then                                                                  {                                                                        _x setVariable['"+_loadedchecktime+"',_ctime];                                                                  }                                                                  else                                                                  {                                                                        _otime = _x getVariable['"+_loadedchecktime+"',_ctime];                                                                  };                                                                                                                                    _timedif = _ctime - _otime;                                                                  _maxdif = ("+str _TDI+")+10;                                                                  if(_timedif > _maxdif) then                                                                  {                                                                        _loaded = _x getVariable['"+_loaded+"',[]];                                                                        if(!isNil'_loaded')then                                                                        {                                                                              for '_i' from 0 to 9 do                                                                              {                                                                                    if!(_i in _loaded) exitWith                                                                                    {                                                                                          _log = format['AH NOT LOADED ON PLAYER (S)  @%1%2, timedif: %3, loaded: %4',                                                                                          getPos _x,                                                                                          mapGridPosition _x,                                                                                          _timedif,                                                                                          _loaded                                                                                          ];                                                                                          [_name,_uid,'HLOG',toArray(_log)] call "+_FNC_AH92_KICKLOG+";                                                                                          [_uid] spawn fnc_infiServerKick;                                                                                    };                                                                              };                                                                        };                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                      "; if(_UVC) then { _A3AHstring = _A3AHstring + "                                                            _obj = vehicle _x;                                                            if!(_obj isEqualTo _x) then                                                            {                                                                  _type = typeOf _obj;                                                                  if((!("+str _UVW+") && {_type in "+str _ForbiddenVehicles+"}) || (("+str _UVW+") && {!(_type in "+str _VehicleWhiteList+")})) then                                                                  {                                                                        _crew = crew _obj;                                                                        if!(_crew isEqualTo []) then                                                                        {                                                                              if(call{{if((getPlayerUID _x) in "+_adminsA+") exitWith {true};false} forEach _crew;}) exitWith {};                                                                                                                                                            _log = format['BadVehicle (S): %1',_type];                                                                              {                                                                                    _name = name _x;                                                                                    _puid = getPlayerUID _x;                                                                                    [_name,_puid,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                                              } forEach _crew;                                                                              call _fnc_deleteObject;                                                                        };                                                                  };                                                            };                                                      "; }; _A3AHstring = _A3AHstring + "                                                };                                          };                                    };                              } forEach allUnits;                        };                        "; if(!isNil 'infiSTAR_LogServerLoops') then { _A3AHstring = _A3AHstring + "                              diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 sleeping %2s   FPS: %3   (v0129)',diag_tickTime,_sleeptime,diag_fps];                        "; }; _A3AHstring = _A3AHstring + "                        uiSleep _sleeptime;                        "; if(!isNil 'infiSTAR_LogServerLoops') then { _A3AHstring = _A3AHstring + "                              diag_log format['<infiSTAR.de> %1 - Thread #1: Server Loop #1 sleeping done, doing it again.   FPS: %2   (v0129)',diag_tickTime,diag_fps];                        "; }; _A3AHstring = _A3AHstring + "                  };            };            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #2: Server Loop #2 starting now!',diag_tickTime];                  "+_TokenCheck+" = true;                  "+_clientonceone+" = true;                  "+_clientoncethree+" = true;                  _zero = ""if(!isServer) then                  {                        _AHKickOFF = compileFinal '                              sleep 0.3;                              _d = (findDisplay 0) createDisplay ''RscDisplayMission'';(findDisplay 0) closeDisplay 0;                              [] spawn {sleep 1;if(isNil ''INFIKICK'') then {INFIKICK = ''INFIKICK'';};publicVariableServer ''INFIKICK'';INFIKICK=nil;};                        ';                        if(isNil'"+_AHKickOFF+"') then {"+_AHKickOFF+" = _AHKickOFF;};                        if(str _AHKickOFF != str "+_AHKickOFF+") then                        {                              [] spawn _AHKickOFF;                        };                        _AH92KICKLOG = compileFinal '                              if(isNil''"+_YourPlayerToken+"'')then{"+_YourPlayerToken+"='''';};                              "+_AH92_KICKLOG+" = ["+_YourPlayerToken+",_this];                              publicVariableServer ''"+_AH92_KICKLOG+"'';                              "+_AH92_KICKLOG+"=nil;                        ';                        if(isNil'"+_AH92KICKLOG+"') then {"+_AH92KICKLOG+" = _AH92KICKLOG;};                        if(str _AH92KICKLOG != str "+_AH92KICKLOG+") then                        {                              [] spawn _AHKickOFF;                        };                                                {                              if(!isNil '_x') then                              {                                    if(typeName _x != 'ARRAY') then                                    {                                          [] spawn _AHKickOFF;                                    };                              };                        } forEach ["+_AH92_KICKLOG+","+_adminsA+","+_MC+"];                        {                              if(!isNil '_x') then                              {                                    if(typeName _x == 'CODE') then                                    {                                          _log = format['AntiAntiHack #2: %1 - %2',_x,missionnamespace getVariable _x];                                          [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn _AHKickOFF;                                    };                              };                        } forEach [                              "+_YourPlayerToken+","+_TokenCheck+","+_clientonceone+","+_clientoncethree+",                              "+_ninetwo+","+_ninetwothread+","+_AH_RunCheckARRAY+","+_AH_RunCheckENDVAR+","+_clientdo+",                              "+_massMessage+","+_AHpos+","+_oneachframe+","+_checkidicheckcheck+","+_lastshotmade+"                        ];                        if(isNil '"+_TokenCheck+"') then                        {                              "+_TokenCheck+" = true;                              [] spawn {                                    waitUntil {!isNil '"+_YourPlayerToken+"'};                                    _tmpYourPlayerToken = "+_YourPlayerToken+";                                    waitUntil {if(isNil'"+_YourPlayerToken+"')then{"+_YourPlayerToken+"='';};str _tmpYourPlayerToken != str "+_YourPlayerToken+"};                                    [] spawn "+_AHKickOFF+";                              };                        };                        "; if(_UMH) then { _A3AHstring = _A3AHstring + "                              _init = (getText(configFile >> 'cfgFunctions' >> 'init'));                              _init1 = "+str _init1+";                              _initL = (getText(configFile >> 'RscDisplayMission' >> 'onLoad'));                              _initUL = (getText(configFile >> 'RscDisplayMission' >> 'onUnload'));                              _markerL = (getText(configFile >> 'RscDisplayInsertMarker' >> 'onLoad'));                              _markerUL = (getText(configFile >> 'RscDisplayInsertMarker' >> 'onUnload'));                              _EB1 = (getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN1' >> 'onMouseButtonDown'));                              _EB2 = (getText(configfile >> 'RscDisplayInventory' >> 'controls' >> 'EpochBTN2' >> 'onMouseButtonDown'));                              _EB3 = (getText(configfile >> 'TapOut' >> 'controls' >> 'tapout' >> 'action'));                              _array = [_init,_initL,_initUL,_markerL,_markerUL,_EB1,_EB2,_EB3];                              {                                    _current = _array select _forEachIndex;                                    if!((toArray(_current)) isEqualTo _x) then                                    {                                          _kickoff = true;                                          if(_forEachIndex == 0) then                                          {                                                if((toArray(_current)) isEqualTo _init1) then                                                {                                                      _kickoff = false;                                                };                                          };                                          if(_kickoff) then                                          {                                                _sb = toString _x;                                                _log = format['Memoryhack: %1, %2, %3',_forEachIndex,_current,_sb];                                                [profileName,getPlayerUID player,'BAN',toArray(_log)] spawn {                                                      waitUntil {!isNil '"+_YourPlayerToken+"'};                                                      _this call "+_AH92KICKLOG+";                                                      [] spawn "+_AHKickOFF+";                                                };                                          };                                    };                              } forEach ["+str _init+","+str _initL+","+str _initUL+","+str _markerL+","+str _markerUL+","+str _EB1+","+str _EB2+","+str _EB3+"];                        "; }; _A3AHstring = _A3AHstring + "                        {                              if(!isNil _x) then                              {                                    _log = format['BadVar: %1',_x];                                    [profileName,getPlayerUID player,'BAN',toArray(_log)] spawn {                                          waitUntil {!isNil '"+_YourPlayerToken+"'};                                          _this call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                              };                              _vc = missionNamespace getVariable _x;                              if(!isNil '_vc') then                              {                                    _log = format['BadVar in missionNamespace: %1 - %2',_x,_vc];                                    [profileName,getPlayerUID player,'BAN',toArray(_log)] spawn {                                          waitUntil {!isNil '"+_YourPlayerToken+"'};                                          _this call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                              };                        } forEach ['diag_tickTime','serverTime','myplayeruid','hhahaaaaar','CharlieSheenkeybinds','KickOFF','yolo','runonce','notakeybind','action1','Supa_Licenses','autokick','wallaisseikun',                        'GEFClose','GEFWhite','GEFRed','GEFGreen','GEFCyan','FirstHint','new_queued','fn_Exec','FND_fnc_select','fnx3','ANTIHACKKICK','tele','dmap','GOLDENS_GLOBAL_SHIT_YEAH','GLASS911_Run',                        'gearDialog_create','lystoKeypress','ThirtySix','LY_SwaggerLikeUs','Jkeyszz','n2','boxofmagic','MainScripts','DMC_fnc_4danews','INFISTARBYPASS','EXEC_TEXT','vehicle_dblclick','init_main',                        'ESP_Count','Nute_Dat_Bomber','s_cash100k','XposPlayer','ly_re_onetime','SKAR_checkA'];                  };                  if(isNil '"+_clientonceone+"') then                  {                        "+_clientonceone+" = true;                        [] spawn {                              private'_playerUID';                              waitUntil {((player == player)&&(!isNil '"+_YourPlayerToken+"')&&(!isNull findDisplay 18)&&(!isNull findDisplay 46))};                              waitUntil {_playerUID = getPlayerUID player;(_playerUID != '')};                              if(isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if(typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};                              _loadedTimer = diag_tickTime + 35;                              while {1 == 1} do                              {                                    if(isNil '"+_AH_RunCheckARRAY+"') exitWith                                    {                                          _log = 'RunCheck bypass detected - ARRAY IS NIL';                                          [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    if(typeName "+_AH_RunCheckARRAY+" != 'ARRAY') exitWith                                    {                                          _log = 'RunCheck bypass detected - TYPE CHANGED';                                          [profileName,_playerUID,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "; if(_AHL) then { _A3AHstring = _A3AHstring + "                                          _vOnP = player getVariable['"+_loaded+"',[]];                                          _vOnM = "+_AH_RunCheckARRAY+";                                          if(str _vOnP != str _vOnM) then                                          {                                                player setVariable['"+_loaded+"',_vOnM,true];                                          };                                          sleep 0.1;                                    "; } else { _A3AHstring = _A3AHstring + "                                          sleep 10;                                    "; }; _A3AHstring = _A3AHstring + "                                    if(diag_tickTime > _loadedTimer) then                                    {                                          _loadedTimer = diag_tickTime + 60;                                                                                    _notIn = [];                                          for '_i' from 0 to 9 do {if!(_i in "+_AH_RunCheckARRAY+") then {_notIn pushBack _i;};};                                          if((str _notIn != '[]')||(isNil '"+_AH_RunCheckENDVAR+"')) then                                          {                                                _globaltime = serverTime;                                                if(_globaltime > 18000) then {_globaltime = diag_tickTime;};                                                _hours = floor(_globaltime/60/60);                                                _minutes = (round(_globaltime/60)-(_hours*60));if(_minutes < 10) then {_minutes = format['0%1',_minutes];};                                                _mytime = format['%1h %2min',_hours,_minutes];                                                _log = format['Loading failed @%1   (Missing: %2, time: %3, diag_tickTime: %4, serverTime: %5(%6))',mapGridPosition player,_notIn,time,diag_tickTime,serverTime,_mytime];                                                if(count _notIn == 10) then                                                {                                                      _log = format['Loading failed @%1 could not load on client at all!   (time: %2, diag_tickTime: %3, serverTime: %4(%5))',mapGridPosition player,time,diag_tickTime,serverTime,_mytime];                                                };                                                [profileName,_playerUID,'HLOG',toArray(_log)] call "+_AH92KICKLOG+";                                                [] spawn "+_AHKickOFF+";                                          };                                    };                              };                        };                  };                  if(isNil '"+_clientoncethree+"') then                  {                        "+_clientoncethree+"=true;                        "+_clientoncethree+" = [] spawn {                              private'_playerUID';                              waitUntil {((player == player)&&(!isNil '"+_YourPlayerToken+"')&&(!isNull findDisplay 18)&&(!isNull findDisplay 46))};                              waitUntil {_playerUID = getPlayerUID player;(_playerUID != '')};                              waitUntil {_ownerVar = _playerUID;{getplayeruid _x == _ownerVar} count playableunits > 0};                              sleep 1;                              if(!isNil '"+_RunOnClients+"') then                              {                                    _tmp_RunOnClients = "+_RunOnClients+";                                    _rnd2 = round(random 99999);"+_RunOnClients+"=_rnd2;                                    if(str "+_RunOnClients+" != str _rnd2) then                                    {                                          _log = format['BadDefinition: RunOnClients has been changed #2! %1',"+_RunOnClients+"];                                          [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                                    "+_RunOnClients+" = nil;                                    if(typeName _tmp_RunOnClients == 'CODE') then                                    {                                          [_playerUID,profileName] call _tmp_RunOnClients;                                    }                                    else                                    {                                          _log = format['BadDefinition: RunOnClients has been changed #1! %1',_tmp_RunOnClients];                                          [profileName,getPlayerUID player,'BAN',toArray(_log)] call "+_AH92KICKLOG+";                                          [] spawn "+_AHKickOFF+";                                    };                              };                        };                  };"";                  _a = ['_USER_DEFINED'];if("+str _UMW+") then {_a = _a + "+str _aLocalM+";};                  _mtimer = diag_tickTime + 30;                  _sleeptime = 12;                  diag_log format['<infiSTAR.de> %1 - Thread #2: Server Loop #2 looping now!',diag_tickTime];                  while {1 == 1} do                  {                        _obj = 'C_man_1' createVehicle [0,0,0];                        _obj addMPEventHandler ['MPKilled',_zero];                        _obj setDamage 5;                        deleteVehicle _obj;                        if(diag_tickTime > _mtimer) then                        {                              _mtimer = diag_tickTime + 30;                              "; if(_CLM) then { _A3AHstring = _A3AHstring + "                                    "+_MC+" = allMapMarkers;publicVariable '"+_MC+"';                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_CGM) then { _A3AHstring = _A3AHstring + "                                    if(isNil'"+_MCS+"') then {"+_MCS+" = allMapMarkers;};                                    {                                          if!(_x in "+_MCS+") then                                          {                                                _cm = _x;                                                _cmLow = toLower _cm;                                                "+_MCS+" pushBack _cm;                                                _MT = MarkerText _cm;                                                _do = true;                                                {if(_cmLow find (toLower _x) > -1) exitWith {_do = false;}} forEach _a;                                                if(_do) then                                                {                                                      if(_cmLow in ['gefmarker','deinvadder','swagmarker']) then                                                      {                                                            _log = format['HackedMarker: %1 - %2',_cm,_MT];                                                            _log call FNC_A3_HACKLOG;                                                            "+_AH_HackLogArrayRND+" pushBack _log;                                                            deleteMarker _cm;                                                      }                                                      else                                                      {                                                            if(_MT in ['Epicenter','Poppy','Ferris','Container','Mineral','']) then                                                            {                                                                  _log = format['DodgyMarker: %1 - %2',_cm,_MT];                                                                  diag_log ('<infiSTAR.de>RPT| '+_log+' (v0129)');                                                            }                                                            else                                                            {                                                                  _log = format['DodgyMarker: %1 - %2',_cm,_MT];                                                                  _log call FNC_A3_SURVEILLANCELOG;                                                                  "+_AH_SurvLogArrayRND+" pushBack _log;                                                            };                                                      };                                                };                                          };                                    } forEach allMapMarkers;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_RAM) then { _A3AHstring = _A3AHstring + "                                    {deleteVehicle _x;} forEach allMines;                              "; }; _A3AHstring = _A3AHstring + "                              "; if(_RUS) then { _A3AHstring = _A3AHstring + "                                    {deleteVehicle _x;} forEach allUnitsUAV;                              "; }; _A3AHstring = _A3AHstring + "                        };                        "; if(!isNil 'infiSTAR_LogServerLoops') then { _A3AHstring = _A3AHstring + "                              diag_log format['<infiSTAR.de> %1 - Thread #2: Server Loop #2 sleeping %2s   FPS: %3   (v0129)',diag_tickTime,_sleeptime,diag_fps];                        "; }; _A3AHstring = _A3AHstring + "                        uiSleep _sleeptime;                        "; if(!isNil 'infiSTAR_LogServerLoops') then { _A3AHstring = _A3AHstring + "                              diag_log format['<infiSTAR.de> %1 - Thread #2: Server Loop #2 sleeping done, doing it again.   FPS: %2   (v0129)',diag_tickTime,diag_fps];                        "; }; _A3AHstring = _A3AHstring + "                  };                  _log = format['%1 - RunOnClients LOOP - BROKEN!',diag_tickTime];                  _log call FNC_A3_HACKLOG;            };            "; if((_MOD == 'EPOCH')&&(_EpochIndestructible)) then { _A3AHstring = _A3AHstring + "                  [] spawn {                        diag_log format['<infiSTAR.de> %1 - Thread #3: Server #3 starting now!',diag_tickTime];                        _timer1 = diag_tickTime+120;                        waitUntil {diag_tickTime > _timer1};                        diag_log format['<infiSTAR.de> %1 - Thread #3: Server #3 waited 120s',diag_tickTime];                        "; if((_MOD == 'EPOCH')&&(_EpochIndestructible)) then { _A3AHstring = _A3AHstring + "                              _indestructible = (allMissionObjects 'Constructions_static_F')+(allMissionObjects 'LockBoxProxy_EPOCH')+(allMissionObjects 'LockBox_EPOCH');                              {                                    if !((typeof _x) in ['PlotPole_EPOCH','WoodStairs_EPOCH','WoodStairs2_EPOCH','WoodFloor_EPOCH','WoodLargeWall_EPOCH','WoodLargeWallDoorL_EPOCH','WoodLargeWallCor_EPOCH','WoodRamp_EPOCH']) then                                     {                                          _x removeAllEventHandlers 'HandleDamage';                                          _x addEventHandler ['HandleDamage', {false}];                                          if !((typeOf _x) in ['LockBoxProxy_EPOCH','LockBox_EPOCH'])then {_x enableSimulation false;};                                          _x allowDamage false;                                          uiSleep 0.01;                                    };                              } forEach _indestructible;                        "; }; _A3AHstring = _A3AHstring + "                  };            "; }; _A3AHstring = _A3AHstring + "            [] spawn {                  diag_log format['<infiSTAR.de> %1 - Thread #4: starting now!',diag_tickTime];                  waitUntil {!isNil 'infiSTAR_MAIN_CODE'};                  "+_MAIN_CODE+" = compileFinal ([infiSTAR_MAIN_CODE] call fnc_CompilableString);                  infiSTAR_MAIN_CODE = nil;                  waitUntil {diag_tickTime > 300};                  _FUNCTION_QUESTAR = profileNamespace getVariable ['FUNCTION_QUESTAR',[]];                  if(!isNil '_FUNCTION_QUESTAR') then                  {                        sleep 3;                        if!(_FUNCTION_QUESTAR isEqualTo []) then                        {                              {                                    _stringifiedARRAY = _x;                                    _ARRAY = call compile _stringifiedARRAY;                                    _codeAsString = toString _ARRAY;                                    _compiledCodeAsString = compile _codeAsString;                                                      [] spawn _compiledCodeAsString;                                    sleep 3;                              } forEach _FUNCTION_QUESTAR;                        };                  };            };      ";      call compileFinal _A3AHstring;      diag_log format['<infiSTAR.de> %1 - AntiHack loaded!',diag_tickTime];      /* ********************************************************************************* */      /* *********************************www.infiSTAR.de********************************* */      /* *******************Developed by infiSTAR (infiSTAR23@gmail.com)****************** */      /* **************infiSTAR Copyright®© 2011 - 2015 All rights reserved.************** */      /* ****DayZAntiHack.com***DayZAntiHack.de***ArmaAntiHack.com***Arma3AntiHack.com**** */